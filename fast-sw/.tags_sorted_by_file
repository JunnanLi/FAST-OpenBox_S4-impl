MAX_PKT	app\ams\main_delay_ams.c	40;"	d	file:
callback	app\ams\main_delay_ams.c	/^int callback(struct fast_packet *pkt,int pkt_len)$/;"	f
main	app\ams\main_delay_ams.c	/^int main(int argc,char* argv[])$/;"	f
pkt_count	app\ams\main_delay_ams.c	/^int  pkt_count =  MAX_PKT,pkt_idx = 0;$/;"	v
pkt_idx	app\ams\main_delay_ams.c	/^int  pkt_count =  MAX_PKT,pkt_idx = 0;$/;"	v
pkt_len	app\ams\main_delay_ams.c	/^int pkt_len = 1000;$/;"	v
pkt_ts_result	app\ams\main_delay_ams.c	/^u64 pkt_ts_result[MAX_PKT] = {0};$/;"	v
recv_pkt	app\ams\main_delay_ams.c	/^struct fast_packet *recv_pkt[MAX_PKT] = {0};$/;"	v	typeref:struct:fast_packet
rule_config_test	app\ams\main_delay_ams.c	/^void rule_config_test(void)$/;"	f
start_ams_func	app\ams\main_delay_ams.c	/^void start_ams_func(void)$/;"	f
ua_init	app\ams\main_delay_ams.c	/^void ua_init(void)$/;"	f
ANT_MID	app\ant\main_ant.c	31;"	d	file:
callback	app\ant\main_ant.c	/^int callback(struct fast_packet *pkt,int pkt_len)$/;"	f
main	app\ant\main_ant.c	/^int main(int argc, char* argv[])$/;"	f
ua_init	app\ant\main_ant.c	/^void ua_init(u8 mid)$/;"	f
MAC_LEN	app\l2switch\main_l2switch.c	36;"	d	file:
MAC_LIFE_TIME	app\l2switch\main_l2switch.c	37;"	d	file:
NM08_NEIGH_MAX	app\l2switch\main_l2switch.c	35;"	d	file:
NM08_PORT_CNT	app\l2switch\main_l2switch.c	34;"	d	file:
addr	app\l2switch\main_l2switch.c	/^	u8  addr[MAC_LEN];  \/*存储MAC地址*\/	$/;"	m	struct:nm08_port_mac	file:
callback	app\l2switch\main_l2switch.c	/^int callback(struct fast_packet *pkt,int pkt_len)$/;"	f
debug	app\l2switch\main_l2switch.c	/^int debug = 0;$/;"	v
ether_addr_equal	app\l2switch\main_l2switch.c	/^int ether_addr_equal(u8 *addr1,u8 *addr2)$/;"	f
find_dmac	app\l2switch\main_l2switch.c	/^int find_dmac(u8 inport,u8 *dst_mac)$/;"	f
learn_smac	app\l2switch\main_l2switch.c	/^void learn_smac(u8 inport,u8 *src_mac)$/;"	f
mac	app\l2switch\main_l2switch.c	/^	struct nm08_port_mac mac[NM08_NEIGH_MAX];$/;"	m	struct:nm08_neigh_table	typeref:struct:nm08_neigh_table::nm08_port_mac	file:
main	app\l2switch\main_l2switch.c	/^int main(int argc,char* argv[])$/;"	f
nm08_mac_aging	app\l2switch\main_l2switch.c	/^void *nm08_mac_aging(void *argv)$/;"	f
nm08_neigh_table	app\l2switch\main_l2switch.c	/^struct nm08_neigh_table$/;"	s	file:
nm08_port_mac	app\l2switch\main_l2switch.c	/^struct nm08_port_mac$/;"	s	file:
nm08_port_stats	app\l2switch\main_l2switch.c	/^struct nm08_port_stats$/;"	s	file:
nm08_show_mac_info	app\l2switch\main_l2switch.c	/^void nm08_show_mac_info(void)$/;"	f
nm08_start_aging	app\l2switch\main_l2switch.c	/^void nm08_start_aging(void)$/;"	f
nm08_table	app\l2switch\main_l2switch.c	/^struct nm08_neigh_table *nm08_table = NULL;$/;"	v	typeref:struct:nm08_neigh_table
pkt_send_flood	app\l2switch\main_l2switch.c	/^void pkt_send_flood(struct fast_packet *pkt,int pkt_len)$/;"	f
pkt_send_normal	app\l2switch\main_l2switch.c	/^void pkt_send_normal(struct fast_packet *pkt,int pkt_len)$/;"	f
port	app\l2switch\main_l2switch.c	/^	struct nm08_port_stats port[NM08_PORT_CNT];$/;"	m	struct:nm08_neigh_table	typeref:struct:nm08_neigh_table::nm08_port_stats	file:
port	app\l2switch\main_l2switch.c	/^	u8  port;	 \/*地址所在端口号信息*\/$/;"	m	struct:nm08_port_mac	file:
recv_bytes	app\l2switch\main_l2switch.c	/^	u64 recv_bytes;$/;"	m	struct:nm08_port_stats	file:
recv_pkts	app\l2switch\main_l2switch.c	/^	u64 recv_pkts;$/;"	m	struct:nm08_port_stats	file:
send_bytes	app\l2switch\main_l2switch.c	/^	u64 send_bytes;$/;"	m	struct:nm08_port_stats	file:
send_pkts	app\l2switch\main_l2switch.c	/^	u64 send_pkts;$/;"	m	struct:nm08_port_stats	file:
tv	app\l2switch\main_l2switch.c	/^	struct timeval tv;  \/*存储此MAC的开始有效时间*\/$/;"	m	struct:nm08_port_mac	typeref:struct:nm08_port_mac::timeval	file:
ua_init	app\l2switch\main_l2switch.c	/^void ua_init(u8 mid)$/;"	f
update_mac_time	app\l2switch\main_l2switch.c	/^void update_mac_time(u8 inport,u8 index)$/;"	f
valid	app\l2switch\main_l2switch.c	/^	u8  valid;	 \/*地址有效位标记*\/$/;"	m	struct:nm08_port_mac	file:
xprintf	app\l2switch\main_l2switch.c	40;"	d	file:
main	app\openflow\main_xofp.c	/^int main(int argc,char* argv[])$/;"	f
HAVE_DLFCN_H	config.h	5;"	d
HAVE_INTTYPES_H	config.h	8;"	d
HAVE_MEMORY_H	config.h	11;"	d
HAVE_STDINT_H	config.h	14;"	d
HAVE_STDLIB_H	config.h	17;"	d
HAVE_STRINGS_H	config.h	20;"	d
HAVE_STRING_H	config.h	23;"	d
HAVE_SYS_STAT_H	config.h	26;"	d
HAVE_SYS_TYPES_H	config.h	29;"	d
HAVE_UNISTD_H	config.h	32;"	d
LT_OBJDIR	config.h	36;"	d
PACKAGE	config.h	39;"	d
PACKAGE_BUGREPORT	config.h	42;"	d
PACKAGE_NAME	config.h	45;"	d
PACKAGE_STRING	config.h	48;"	d
PACKAGE_TARNAME	config.h	51;"	d
PACKAGE_URL	config.h	54;"	d
PACKAGE_VERSION	config.h	57;"	d
STDC_HEADERS	config.h	60;"	d
VERSION	config.h	63;"	d
ANT_HW_STATE	include\ant_driver.h	77;"	d
LAT_FLAG	include\ant_driver.h	59;"	d
LAT_PKT_CNT	include\ant_driver.h	55;"	d
LAT_PKT_REG	include\ant_driver.h	56;"	d
N_RTT	include\ant_driver.h	68;"	d
PGM_RD_FIN_S	include\ant_driver.h	83;"	d
PROTO_TYPE	include\ant_driver.h	69;"	d
RD_SOFT_RST	include\ant_driver.h	60;"	d
RD_STATE	include\ant_driver.h	61;"	d
SCM_BIT_CNT	include\ant_driver.h	70;"	d
SCM_FETCH_S	include\ant_driver.h	82;"	d
SCM_PKT_CNT	include\ant_driver.h	71;"	d
SCM_RAM_ADDR	include\ant_driver.h	73;"	d
SCM_SOFT_RST	include\ant_driver.h	67;"	d
SCM_STATE	include\ant_driver.h	66;"	d
SENT_BIT_CNT	include\ant_driver.h	57;"	d
SENT_PKT_CNT	include\ant_driver.h	58;"	d
SENT_RATE_CNT	include\ant_driver.h	53;"	d
SENT_RATE_REG	include\ant_driver.h	54;"	d
SENT_TIME_CNT	include\ant_driver.h	50;"	d
SENT_TIME_REG	include\ant_driver.h	51;"	d
WR_SOFT_RST	include\ant_driver.h	52;"	d
__ANT_DRIVER_H__	include\ant_driver.h	33;"	d
ant_cnt	include\ant_driver.h	/^struct ant_cnt$/;"	s
ant_parameter	include\ant_driver.h	/^struct ant_parameter$/;"	s
lat_flag	include\ant_driver.h	/^	u8  lat_flag;   \/** Flag for enabling latency test*\/$/;"	m	struct:ant_parameter
lat_pkt	include\ant_driver.h	/^	u32 lat_pkt;    \/** blocking num pof packet between two latency flag packets*\/$/;"	m	struct:ant_parameter
n_rtt	include\ant_driver.h	/^	u32 n_rtt;      \/** Controlling the waiting time after sending last packet*\/$/;"	m	struct:ant_parameter
proto_type	include\ant_driver.h	/^	u8  proto_type;  \/** Protocol type used in SCM*\/$/;"	m	struct:ant_parameter
recv_bits	include\ant_driver.h	/^	u64 recv_bits; \/** total received bytes of sending packets*\/$/;"	m	struct:ant_cnt
recv_pkts	include\ant_driver.h	/^	u64 recv_pkts; \/** total received number of sending packets*\/$/;"	m	struct:ant_cnt
s16	include\ant_driver.h	/^typedef short s16;$/;"	t
s32	include\ant_driver.h	/^typedef int s32;$/;"	t
s64	include\ant_driver.h	/^typedef long long s64;$/;"	t
s8	include\ant_driver.h	/^typedef char s8;$/;"	t
sent_bits	include\ant_driver.h	/^	u64 sent_bits; \/** total sent bytes of pcakets *\/$/;"	m	struct:ant_cnt
sent_pkts	include\ant_driver.h	/^	u64 sent_pkts; \/** total sent num of packets *\/$/;"	m	struct:ant_cnt
sent_rate	include\ant_driver.h	/^	u32 sent_rate;$/;"	m	struct:ant_parameter
sent_time	include\ant_driver.h	/^	u64 sent_time;$/;"	m	struct:ant_parameter
test_time	include\ant_driver.h	/^	u64 test_time; \/** 共计测试时间 *\/$/;"	m	struct:ant_cnt
u16	include\ant_driver.h	/^typedef unsigned short u16;$/;"	t
u32	include\ant_driver.h	/^typedef unsigned int u32;$/;"	t
u64	include\ant_driver.h	/^typedef unsigned long long u64;$/;"	t
u8	include\ant_driver.h	/^typedef unsigned char u8;$/;"	t
EPFX	include\fast.h	101;"	d
EPFX	include\fast.h	106;"	d
FAST_10	include\fast.h	67;"	d
FAST_10	include\fast.h	68;"	d
FAST_20	include\fast.h	70;"	d
FAST_DBG	include\fast.h	102;"	d
FAST_DBG	include\fast.h	107;"	d
FAST_ERR	include\fast.h	103;"	d
FAST_ERR	include\fast.h	108;"	d
LOOKUP_BV	include\fast.h	74;"	d
LOOKUP_BV	include\fast.h	75;"	d
OPENBOX_S28	include\fast.h	62;"	d
OPENBOX_S28	include\fast.h	63;"	d
OPENBOX_S4	include\fast.h	58;"	d
PFX	include\fast.h	100;"	d
PFX	include\fast.h	105;"	d
XDL_DEBUG	include\fast.h	54;"	d
XDL_DEBUG	include\fast.h	55;"	d
__FAST_H__	include\fast.h	32;"	d
E_RULE_INDEX_OVERFLOW	include\fast_err.h	32;"	d
E_UA_NLSK_BIND	include\fast_err.h	36;"	d
E_UA_NLSK_CREATE	include\fast_err.h	34;"	d
E_UA_NLSK_REG_ERR	include\fast_err.h	38;"	d
__FAST_ERR_H__	include\fast_err.h	29;"	d
ACTION	include\fast_struct.h	/^}ACTION;$/;"	t	typeref:enum:__anon3
ACTION_DROP	include\fast_struct.h	/^        ACTION_DROP = 0,		\/**< 报文在硬件,由FPGA处理：丢弃报文*\/$/;"	e	enum:__anon3
ACTION_KEEP_RESOURCE	include\fast_struct.h	/^		ACTION_KEEP_RESOURCE = 7,\/**< 支持流在端口转发时的资源预留*\/$/;"	e	enum:__anon3
ACTION_POLL	include\fast_struct.h	/^        ACTION_POLL = 2,		\/**< 报文送软件,由CPU处理：将报文循环分派到处理线程(处理线程数则驱动模块参数决定,在指定线程数内循环派送)*\/$/;"	e	enum:__anon3
ACTION_PORT	include\fast_struct.h	/^        ACTION_PORT = 3,		\/**< 报文在硬件,由FPGA处理：从指定硬件物理端口输出报文*\/$/;"	e	enum:__anon3
ACTION_REPLACE_PROTO	include\fast_struct.h	/^		ACTION_REPLACE_PROTO = 6,\/**< 支持协议替换操作*\/$/;"	e	enum:__anon3
ACTION_SET_MID	include\fast_struct.h	/^        ACTION_SET_MID = 4,		\/**< 报文送软件,由CPU处理：设置报文分派的模块ID号*\/$/;"	e	enum:__anon3
ACTION_SET_PID	include\fast_struct.h	/^        ACTION_SET_PID = 1,		\/**< 报文送软件,由CPU处理：设置报文的处理线程ID号(处理线程数则驱动模块参数决定,默认从0开始,不能超过线程最大值)*\/$/;"	e	enum:__anon3
ACTION_SET_QUEUE_RTP	include\fast_struct.h	/^		ACTION_SET_QUEUE_RTP = 5,\/**< 支持传媒RTP视频流的队列调度*\/$/;"	e	enum:__anon3
FAST_UA_NETLINK	include\fast_struct.h	86;"	d
FAST_UA_PKT_MAX_LEN	include\fast_struct.h	94;"	d
FAST_UA_REG_LEN	include\fast_struct.h	90;"	d
NMAC_TYPE	include\fast_struct.h	/^}NMAC_TYPE;$/;"	t	typeref:enum:__anon1
NM_CONN	include\fast_struct.h	/^	NM_CONN = 1,	\/**< NMAC的连接报文*\/	$/;"	e	enum:__anon1
NM_RD_RPL	include\fast_struct.h	/^	NM_RD_RPL,		\/**< NMAC的读回应报文*\/	$/;"	e	enum:__anon1
NM_REG_RD	include\fast_struct.h	/^	NM_REG_RD,		\/**< NMAC的读请求报文*\/	$/;"	e	enum:__anon1
NM_REG_WR	include\fast_struct.h	/^	NM_REG_WR,		\/**< NMAC的写操作报文*\/	$/;"	e	enum:__anon1
NM_RELESE	include\fast_struct.h	/^	NM_RELESE,		\/**< NMAC的释放（关闭）报文*\/$/;"	e	enum:__anon1
NM_WR_RPL	include\fast_struct.h	/^	NM_WR_RPL,		\/**< NMAC的写回应报文*\/$/;"	e	enum:__anon1
UA_ERR	include\fast_struct.h	/^	UA_ERR  = 37	\/**< UA操作失败*\/$/;"	e	enum:__anon2
UA_MAX_MID_CNT	include\fast_struct.h	99;"	d
UA_OK	include\fast_struct.h	/^	UA_OK = 26,		\/**< UA操作成功*\/$/;"	e	enum:__anon2
UA_REG	include\fast_struct.h	/^	UA_REG = 21,	\/**< UA注册*\/	$/;"	e	enum:__anon2
UA_STATE	include\fast_struct.h	/^}UA_STATE;$/;"	t	typeref:enum:__anon2
UA_UNREG	include\fast_struct.h	/^	UA_UNREG = 32,  \/**< UA注销*\/	$/;"	e	enum:__anon2
__FAST_STRUCT_H__	include\fast_struct.h	32;"	d
a	include\fast_struct.h	/^	u64 a;$/;"	m	struct:common_metadata
action	include\fast_struct.h	/^	u32 action;				\/**< @brief 规则所对应的执行动作，动作由两部分组成，高4位为ACTION枚举类型，低28位不此类型对应的值 @see ::ACTION*\/$/;"	m	struct:fast_rule
action	include\fast_struct.h	/^	u32 action;$/;"	m	struct:row_bv
addr	include\fast_struct.h	/^	u64 addr:32,$/;"	m	struct:ctl_metadata
addr	include\fast_struct.h	/^	u8 addr[16];		\/**< @brief 存储IPv6地址的每个字节对象*\/$/;"	m	struct:in6_xaddr
arp	include\fast_struct.h	/^				} arp;					\/**< @brief ARP的MAC地址信息*\/$/;"	m	union:flow::__anon4::__anon5::__anon6	typeref:struct:flow::__anon4::__anon5::__anon6::__anon8
b	include\fast_struct.h	/^	u64 b:32,$/;"	m	struct:common_metadata
c	include\fast_struct.h	/^		c:31,$/;"	m	struct:common_metadata
cm	include\fast_struct.h	/^		struct ctl_metadata cm;		\/**< 控制报文格式定义*\/$/;"	m	union:fast_packet::__anon12	typeref:struct:fast_packet::__anon12::ctl_metadata
common_metadata	include\fast_struct.h	/^struct common_metadata$/;"	s
cookie	include\fast_struct.h	/^	u64 cookie;				\/**< @brief 用来存储流的cookie信息，软件使用*\/$/;"	m	struct:fast_rule
cookie_mask	include\fast_struct.h	/^	u64 cookie_mask;		\/**< @brief 用来存储流cookie的掩码信息，软件使用*\/$/;"	m	struct:fast_rule
count	include\fast_struct.h	/^	u8 count;			\/**< @brief NMAC报文头的计数值，表示后面的读写操作包含多少个*\/$/;"	m	struct:nm_head
ctl_metadata	include\fast_struct.h	/^struct ctl_metadata$/;"	s
d	include\fast_struct.h	/^	u64 d;$/;"	m	struct:common_metadata
data	include\fast_struct.h	/^	u64 data:32,$/;"	m	struct:ctl_metadata
data	include\fast_struct.h	/^	u8 data[1514];				\/**< @brief 完整以太网报文数据，暂时不含CRC数据*\/$/;"	m	struct:fast_packet
dip	include\fast_struct.h	/^	u32 dip;$/;"	m	struct:tuple5
discard	include\fast_struct.h	/^		discard:1,		\/**< @brief 指示报文是否丢弃 @note 默认为0，表示不丢弃，置1时表示丢弃*\/$/;"	m	struct:um_metadata
dmac	include\fast_struct.h	/^	u8  dmac[ETH_ALEN];	\/**< @brief Ethernet source address. *\/$/;"	m	struct:flow
dport	include\fast_struct.h	/^					u16 dport;		\/**< @brief TCP\/UDP\/SCTP destination port. *\/$/;"	m	struct:flow::__anon4::__anon5::__anon6::__anon7
dport	include\fast_struct.h	/^					u16 dport;		\/**< @brief TCP\/UDP\/SCTP destination port. *\/$/;"	m	struct:flow::__anon4::__anon9::__anon10::__anon11
dport	include\fast_struct.h	/^	u16 dport;$/;"	m	struct:tuple5
dst	include\fast_struct.h	/^			struct in6_addr dst;	\/**< @brief IPv6 destination address. *\/$/;"	m	struct:flow::__anon4::__anon9	typeref:struct:flow::__anon4::__anon9::in6_addr
dst	include\fast_struct.h	/^			u32 dst;	\/**< @brief IP destination address. *\/$/;"	m	struct:flow::__anon4::__anon5
dstmid	include\fast_struct.h	/^		dstmid:8,		\/**< @brief 报文下次处理的目的模块编号*\/$/;"	m	struct:um_metadata
dstmid	include\fast_struct.h	/^		dstmid:8,$/;"	m	struct:ctl_metadata
e	include\fast_struct.h	/^	u64 e;$/;"	m	struct:common_metadata
fast_packet	include\fast_struct.h	/^struct fast_packet$/;"	s
fast_rule	include\fast_struct.h	/^struct fast_rule{$/;"	s
fast_ua_kernel_msg	include\fast_struct.h	/^struct fast_ua_kernel_msg$/;"	s
fast_ua_recv_callback	include\fast_struct.h	/^typedef int(*fast_ua_recv_callback)(struct fast_packet *pkt,int pkt_len);$/;"	t
flag	include\fast_struct.h	/^	u16 flag;					\/**< @brief 2字节对齐标志，主要是为了IP地址的对齐 @note 此标志在内核会用来标记是一个FAST类型报文，建议用户不使用些字段*\/$/;"	m	struct:fast_packet
flags	include\fast_struct.h	/^					u16 flags;		\/**< @brief TCP flags. *\/$/;"	m	struct:flow::__anon4::__anon5::__anon6::__anon7
flags	include\fast_struct.h	/^					u16 flags;		\/**< @brief TCP flags. *\/$/;"	m	struct:flow::__anon4::__anon9::__anon10::__anon11
flow	include\fast_struct.h	/^struct flow \/*2017\/06\/01开始启用，支持IPv6*\/$/;"	s
flowID	include\fast_struct.h	/^		flowID:14,		\/**< @brief 流ID号*\/$/;"	m	struct:um_metadata
flow_stats_info	include\fast_struct.h	/^	u64 *flow_stats_info;   \/**< @brief 流表信息存储指针位置*\/$/;"	m	struct:fast_rule
flow_stats_len	include\fast_struct.h	/^	u32 flow_stats_len;		\/**< @brief 流表信息长度*\/$/;"	m	struct:fast_rule
frag	include\fast_struct.h	/^	u8  frag:4,			\/**< @brief One of OVS_FRAG_TYPE_*. *\/$/;"	m	struct:flow
idx	include\fast_struct.h	/^	u32 idx:5,		\/**< 规则索引*\/$/;"	m	struct:row_bv
in6_xaddr	include\fast_struct.h	/^struct in6_xaddr$/;"	s
inport	include\fast_struct.h	/^		inport:4,		\/**< @brief 输入端口号 @note 取值：0——15，最多表示16个输入端口*\/$/;"	m	struct:um_metadata
ipv4	include\fast_struct.h	/^		} ipv4;							\/**< @brief IPv4协议相关字段*\/$/;"	m	union:flow::__anon4	typeref:struct:flow::__anon4::__anon5
ipv6	include\fast_struct.h	/^		} ipv6;						\/**< @brief IPv6协议相关字段*\/$/;"	m	union:flow::__anon4	typeref:struct:flow::__anon4::__anon9
key	include\fast_struct.h	/^	struct flow key;		\/**< @brief 规则内容存储结构 @see ::flow*\/$/;"	m	struct:fast_rule	typeref:struct:fast_rule::flow
key	include\fast_struct.h	/^	struct tuple5 key;$/;"	m	struct:row_bv	typeref:struct:row_bv::tuple5
label	include\fast_struct.h	/^			u32 label;				\/**< @brief IPv6 flow label. *\/$/;"	m	struct:flow::__anon4::__anon9
len	include\fast_struct.h	/^		len:12,			\/**< @brief 报文长度 @note 最大可表示4095字节，但FAST平台报文缓存区最大为2048，完整以太网报文的MTU不要超过1500*\/$/;"	m	struct:um_metadata
mask	include\fast_struct.h	/^		mask:32;$/;"	m	struct:ctl_metadata
mask	include\fast_struct.h	/^	struct flow mask;		\/**< @brief 规则掩码设置结构,与key一一对应 @see ::flow*\/$/;"	m	struct:fast_rule	typeref:struct:fast_rule::flow
mask	include\fast_struct.h	/^	struct tuple5 mask;	$/;"	m	struct:row_bv	typeref:struct:row_bv::tuple5
md	include\fast_struct.h	/^		struct common_metadata md;  \/**< 公共控制信息，报文类型（0：数据，1：控制）*\/$/;"	m	union:fast_packet::__anon12	typeref:struct:fast_packet::__anon12::common_metadata
md5	include\fast_struct.h	/^	u32 md5[4];				\/**< @brief MD5值 @note 用来区分规则的唯一性，软件生成规则时即会判断是否规则重复*\/	$/;"	m	struct:fast_rule
mid	include\fast_struct.h	/^	int mid;			\/**< @brief 提供相应的处理MID号 @note 软件模块MID号范围为：129-255*\/$/;"	m	struct:fast_ua_kernel_msg
nil	include\fast_struct.h	/^			u16 nil;$/;"	m	struct:flow::__anon4::__anon9
nm	include\fast_struct.h	/^	struct nm_head nm;  \/**< @brief NMAC报文头*\/	$/;"	m	struct:nm_packet	typeref:struct:nm_packet::nm_head
nm_head	include\fast_struct.h	/^struct nm_head$/;"	s
nm_packet	include\fast_struct.h	/^struct nm_packet$/;"	s
outport	include\fast_struct.h	/^	u64 outport:16,		\/**< @brief 报文输出端口号 @note 以bitmap形式表示，1表示从0号端口输出；8表示从3号端口输出*\/$/;"	m	struct:um_metadata
pad	include\fast_struct.h	/^		pad:26;		\/**< 暂时不用*\/$/;"	m	struct:row_bv
pad	include\fast_struct.h	/^	u32 pad[18];			\/**< @brief 总长256B，此为确保数据结构大小做的填充*\/$/;"	m	struct:fast_rule
pad0	include\fast_struct.h	/^	u16 pad0;$/;"	m	struct:tuple5
pad1	include\fast_struct.h	/^	u8 pad1;$/;"	m	struct:tuple5
parameter_1	include\fast_struct.h	/^    u8 parameter_1;		\/**< @brief 报文计数值1*\/$/;"	m	struct:nm_head
parameter_2	include\fast_struct.h	/^	u8 parameter_2;		\/**< @brief 报文计数值2*\/$/;"	m	struct:nm_head
pid	include\fast_struct.h	/^	int pid;			\/**< @brief 用户程序的PID，UA注册时，低层库函数自动获取当前进程号*\/$/;"	m	struct:fast_ua_kernel_msg
pktdst	include\fast_struct.h	/^		pktdst:1,		\/**< @brief 报文的输出目的方向 @note 0表示输出到网络端口，1表示输出到CPU*\/$/;"	m	struct:um_metadata
pktsrc	include\fast_struct.h	/^		pktsrc:1;		\/**< @brief 报文的输入源方向 @note 0表示网络端口输入，1表示从CPU输入*\/$/;"	m	struct:um_metadata
pkttype	include\fast_struct.h	/^		pkttype:1;$/;"	m	struct:common_metadata
pkttype	include\fast_struct.h	/^		pkttype:1;$/;"	m	struct:ctl_metadata
port	include\fast_struct.h	/^		port:4;			\/**< @brief Input Port*\/$/;"	m	struct:flow
priority	include\fast_struct.h	/^		priority:3,		\/**< @brief 报文优先级*\/$/;"	m	struct:um_metadata
priority	include\fast_struct.h	/^	u32 priority;			\/**< @brief 规则的优先级设置*\/$/;"	m	struct:fast_rule
proto	include\fast_struct.h	/^	u8  proto;			\/**< @brief IP protocol or lower 8 bits of ARP opcode. *\/$/;"	m	struct:flow
proto	include\fast_struct.h	/^	u8 proto;$/;"	m	struct:tuple5
regaddr	include\fast_struct.h	/^	u64 regaddr;		\/**< @brief 读或写的寄存器地址*\/	$/;"	m	struct:nm_packet
regvalue	include\fast_struct.h	/^	u64 regvalue;		\/**< @brief 读回或写入的寄存器地址对应的值*\/	$/;"	m	struct:nm_packet
reserve	include\fast_struct.h	/^	u64 reserve;$/;"	m	struct:ctl_metadata
reserve16_B	include\fast_struct.h	/^    u16 reserve16_B;	\/**< @brief 报文计数值*\/$/;"	m	struct:nm_head
reserve8_A	include\fast_struct.h	/^    u8 reserve8_A;	    \/**< @brief 暂时保留不用*\/$/;"	m	struct:nm_head
reserve8_C	include\fast_struct.h	/^    u8 reserve8_C;		\/**< @brief 报文计数值*\/$/;"	m	struct:nm_head
row_bv	include\fast_struct.h	/^struct row_bv$/;"	s
seq	include\fast_struct.h	/^		seq:12,			\/**< @brief 报文接收时的序列号 @note 每个端口独立维护一个编号*\/$/;"	m	struct:um_metadata
seq	include\fast_struct.h	/^		seq:12,$/;"	m	struct:ctl_metadata
seq	include\fast_struct.h	/^    u16 seq;			\/**< @brief NMAC报文头的序号，每发一个报文计数加1*\/$/;"	m	struct:nm_head
sessionID	include\fast_struct.h	/^	u64 sessionID;$/;"	m	struct:ctl_metadata
sha	include\fast_struct.h	/^					u8 sha[ETH_ALEN];	\/**< @brief ARP source hardware address. *\/$/;"	m	struct:flow::__anon4::__anon5::__anon6::__anon8
sip	include\fast_struct.h	/^	u32 sip;$/;"	m	struct:tuple5
smac	include\fast_struct.h	/^	u8  smac[ETH_ALEN];	\/**< @brief Ethernet destination address. *\/$/;"	m	struct:flow
sport	include\fast_struct.h	/^					u16 sport;		\/**< @brief TCP\/UDP\/SCTP source port. *\/$/;"	m	struct:flow::__anon4::__anon5::__anon6::__anon7
sport	include\fast_struct.h	/^					u16 sport;		\/**< @brief TCP\/UDP\/SCTP source port. *\/$/;"	m	struct:flow::__anon4::__anon9::__anon10::__anon11
sport	include\fast_struct.h	/^	u16 sport;$/;"	m	struct:tuple5
src	include\fast_struct.h	/^			struct in6_addr src;	\/**< @brief IPv6 source address. *\/$/;"	m	struct:flow::__anon4::__anon9	typeref:struct:flow::__anon4::__anon9::in6_addr
src	include\fast_struct.h	/^			u32 src;	\/**< @brief IP source address. *\/$/;"	m	struct:flow::__anon4::__anon5
srcmid	include\fast_struct.h	/^		srcmid:8,		\/**< @brief 报文上次处理时的模块编号*\/$/;"	m	struct:um_metadata
srcmid	include\fast_struct.h	/^		srcmid:8,$/;"	m	struct:ctl_metadata
state	include\fast_struct.h	/^	UA_STATE state;		\/**< @brief UA消息枚举状态 @see ::UA_STATE*\/$/;"	m	struct:fast_ua_kernel_msg
tci	include\fast_struct.h	/^	u16 tci;			\/**< @brief 0 if no VLAN, VLAN_TAG_PRESENT set otherwise. *\/$/;"	m	struct:flow
tha	include\fast_struct.h	/^					u8 tha[ETH_ALEN];	\/**< @brief ARP target hardware address. *\/$/;"	m	struct:flow::__anon4::__anon5::__anon6::__anon8
tmp	include\fast_struct.h	/^	u32 *tmp;				\/*在S4系统中，上面变量指针大小为32*\/$/;"	m	struct:fast_rule
tos	include\fast_struct.h	/^	u8  tos;			\/**< @brief IP ToS. *\/$/;"	m	struct:flow
tp	include\fast_struct.h	/^				} tp;				\/**< @brief IPv4的传输层端口与标志信息*\/$/;"	m	union:flow::__anon4::__anon5::__anon6	typeref:struct:flow::__anon4::__anon5::__anon6::__anon7
tp	include\fast_struct.h	/^				} tp;				\/**< @brief IPv6的传输层端口与标志信息*\/$/;"	m	union:flow::__anon4::__anon9::__anon10	typeref:struct:flow::__anon4::__anon9::__anon10::__anon11
ts	include\fast_struct.h	/^	u64 ts:32,			\/**< @brief 报文接收的时间戳 @note 如果用户需要使用表示更大的时间，建议存储在第二拍数据中（user[2]字段）*\/$/;"	m	struct:um_metadata
ts2	include\fast_struct.h	/^		ts2:12,$/;"	m	struct:um_metadata
ttl	include\fast_struct.h	/^		ttl:4;			\/**< @brief 报文通过模块的TTL值，每过一个处理模块减1*\/$/;"	m	struct:um_metadata
ttl	include\fast_struct.h	/^	u8  ttl;			\/**< @brief IP TTL\/hop limit. *\/$/;"	m	struct:flow
tuple5	include\fast_struct.h	/^struct tuple5$/;"	s
type	include\fast_struct.h	/^		type:3,$/;"	m	struct:ctl_metadata
type	include\fast_struct.h	/^	u16 type;			\/**< @brief Ethernet frame type. *\/$/;"	m	struct:flow
type	include\fast_struct.h	/^    u8 type;			\/**< @brief NMAC报文头的类型，@see ::NMAC_TYPE*\/$/;"	m	struct:nm_head
um	include\fast_struct.h	/^		struct um_metadata um;		\/**< @brief UM模块数据格式定义 @see ::um_metadata *\/$/;"	m	union:fast_packet::__anon12	typeref:struct:fast_packet::__anon12::um_metadata
um_metadata	include\fast_struct.h	/^struct um_metadata{$/;"	s
user	include\fast_struct.h	/^	u64 user[2];		\/**< @brief 用户自定义metadata数据格式与内容 @remarks 此字段由可用户改写，但需要保证数据大小严格限定在16字节*\/$/;"	m	struct:um_metadata
valid	include\fast_struct.h	/^		valid:1,	\/**< 规则有效位*\/$/;"	m	struct:row_bv
valid	include\fast_struct.h	/^	u32 valid;				\/**< @brief 规则的有效标志设置,要删除一条规则只需要将此标记置0,并更新到硬件*\/$/;"	m	struct:fast_rule
__FAST_SYS_DEV_H__	include\fast_sys_dev.h	27;"	d
__FAST_TYPE_H__	include\fast_type.h	34;"	d
s16	include\fast_type.h	/^typedef short s16;				\/**< 有符号的16位（2字节）数据定义*\/$/;"	t
s32	include\fast_type.h	/^typedef int s32;				\/**< 有符号的32位（4字节）数据定义*\/$/;"	t
s64	include\fast_type.h	/^typedef long long s64;				\/**< 有符号的64位（8字节）数据定义*\/$/;"	t
s8	include\fast_type.h	/^typedef char s8;				\/**< 有符号的8位（1字节）数据定义*\/$/;"	t
u16	include\fast_type.h	/^typedef unsigned short u16;	\/**< 无符号的16位（2字节）数据定义*\/$/;"	t
u32	include\fast_type.h	/^typedef unsigned int u32;		\/**< 无符号的32位（4字节）数据定义*\/$/;"	t
u64	include\fast_type.h	/^typedef unsigned long long u64;		\/**< 无符号的64位（8字节）数据定义*\/$/;"	t
u8	include\fast_type.h	/^typedef unsigned char u8;		\/**< 无符号的8位（1字节）数据定义*\/$/;"	t
FAST_AMS_TX_START	include\fast_vaddr.h	60;"	d
FAST_AMS_TX_STATUS	include\fast_vaddr.h	59;"	d
FAST_AMS_TX_TIME_H	include\fast_vaddr.h	57;"	d
FAST_AMS_TX_TIME_L	include\fast_vaddr.h	58;"	d
FAST_DMID_PROTO_STACK	include\fast_vaddr.h	48;"	d
SPEED_10	include\fast_vaddr.h	50;"	d
SPEED_100	include\fast_vaddr.h	51;"	d
SPEED_1000	include\fast_vaddr.h	52;"	d
SPEED_10000	include\fast_vaddr.h	54;"	d
SPEED_2500	include\fast_vaddr.h	53;"	d
__FAST_VADDR_H__	include\fast_vaddr.h	32;"	d
AMS_VERSION	include\fast_version.h	68;"	d
CTL_RW_VERSION	include\fast_version.h	76;"	d
DEBUG_VERSION	include\fast_version.h	84;"	d
L2SWITCH_VERSION	include\fast_version.h	64;"	d
LIBAMS_VERSION	include\fast_version.h	60;"	d
LIBOFP_VERSION	include\fast_version.h	42;"	d
LIBREG_VERSION	include\fast_version.h	38;"	d
LIBRULE_VERSION	include\fast_version.h	47;"	d
LIBUA_VERSION	include\fast_version.h	53;"	d
MEM_RW_VERSION	include\fast_version.h	78;"	d
PORT_COUNTS_VERSION	include\fast_version.h	74;"	d
PORT_STATUS_VERSION	include\fast_version.h	82;"	d
REG_RW_VERSION	include\fast_version.h	72;"	d
RULE_RW_VERSION	include\fast_version.h	80;"	d
VERSION_VERSION	include\fast_version.h	86;"	d
XOF_VERSION	include\fast_version.h	66;"	d
__FAST_VERSION_H__	include\fast_version.h	28;"	d
BASE_ADDR	include\netmagic08.h	53;"	d
FAST_ACTION_REG_ADDR	include\netmagic08.h	33;"	d
FAST_COUNTS_RECV_BYTE_L	include\netmagic08.h	57;"	d
FAST_COUNTS_RECV_PKT_L	include\netmagic08.h	59;"	d
FAST_COUNTS_SEND_BYTE_L	include\netmagic08.h	58;"	d
FAST_COUNTS_SEND_PKT_L	include\netmagic08.h	60;"	d
FAST_DEFAULT_RULE_ADDR	include\netmagic08.h	34;"	d
FAST_HW_REG_VERSION	include\netmagic08.h	30;"	d
FAST_PORT_BASE	include\netmagic08.h	50;"	d
FAST_PORT_OFT	include\netmagic08.h	51;"	d
FAST_RULE_CNT	include\netmagic08.h	55;"	d
FAST_RULE_REG_RADDR	include\netmagic08.h	38;"	d
FAST_RULE_REG_VADDR	include\netmagic08.h	39;"	d
FAST_RULE_REG_WADDR	include\netmagic08.h	37;"	d
REG_LEN	include\netmagic08.h	54;"	d
__NETMAGIC08_H__	include\netmagic08.h	27;"	d
BASE_ADDR	include\openboxS28.h	55;"	d
FAST_ACTION_REG_ADDR	include\openboxS28.h	35;"	d
FAST_AMS_TX_START	include\openboxS28.h	126;"	d
FAST_AMS_TX_START	include\openboxS28.h	65;"	d
FAST_AMS_TX_START	include\openboxS28.h	69;"	d
FAST_AMS_TX_STATUS	include\openboxS28.h	125;"	d
FAST_AMS_TX_STATUS	include\openboxS28.h	64;"	d
FAST_AMS_TX_STATUS	include\openboxS28.h	68;"	d
FAST_AMS_TX_TIME_H	include\openboxS28.h	123;"	d
FAST_AMS_TX_TIME_H	include\openboxS28.h	62;"	d
FAST_AMS_TX_TIME_H	include\openboxS28.h	66;"	d
FAST_AMS_TX_TIME_L	include\openboxS28.h	124;"	d
FAST_AMS_TX_TIME_L	include\openboxS28.h	63;"	d
FAST_AMS_TX_TIME_L	include\openboxS28.h	67;"	d
FAST_COUNTS_ALIGNER	include\openboxS28.h	77;"	d
FAST_COUNTS_CRC_ERR	include\openboxS28.h	76;"	d
FAST_COUNTS_RCVBPKT	include\openboxS28.h	88;"	d
FAST_COUNTS_RCVFERR	include\openboxS28.h	84;"	d
FAST_COUNTS_RCVMPKT	include\openboxS28.h	87;"	d
FAST_COUNTS_RCVSPKT	include\openboxS28.h	86;"	d
FAST_COUNTS_RECV_BYTE_H	include\openboxS28.h	81;"	d
FAST_COUNTS_RECV_BYTE_L	include\openboxS28.h	80;"	d
FAST_COUNTS_RECV_PKT_L	include\openboxS28.h	75;"	d
FAST_COUNTS_SEND_BYTE_H	include\openboxS28.h	79;"	d
FAST_COUNTS_SEND_BYTE_L	include\openboxS28.h	78;"	d
FAST_COUNTS_SEND_PKT_L	include\openboxS28.h	74;"	d
FAST_COUNTS_SNDBPKT	include\openboxS28.h	91;"	d
FAST_COUNTS_SNDFERR	include\openboxS28.h	85;"	d
FAST_COUNTS_SNDMPKT	include\openboxS28.h	90;"	d
FAST_COUNTS_SNDSPKT	include\openboxS28.h	89;"	d
FAST_DEFAULT_RULE_ADDR	include\openboxS28.h	36;"	d
FAST_HW_REG_VERSION	include\openboxS28.h	32;"	d
FAST_PORT_BASE	include\openboxS28.h	52;"	d
FAST_PORT_BUF_LEVEL	include\openboxS28.h	98;"	d
FAST_PORT_FRAME_MAX_LEN	include\openboxS28.h	97;"	d
FAST_PORT_FRAME_SPACE	include\openboxS28.h	99;"	d
FAST_PORT_MAC_0	include\openboxS28.h	95;"	d
FAST_PORT_MAC_1	include\openboxS28.h	96;"	d
FAST_PORT_MAC_CORE_CONFIG	include\openboxS28.h	94;"	d
FAST_PORT_NEG_STATUS	include\openboxS28.h	105;"	d
FAST_PORT_NEG_STATUS_100M	include\openboxS28.h	107;"	d
FAST_PORT_NEG_STATUS_10M	include\openboxS28.h	106;"	d
FAST_PORT_NEG_STATUS_1G	include\openboxS28.h	108;"	d
FAST_PORT_NEG_STATUS_DOWN	include\openboxS28.h	112;"	d
FAST_PORT_NEG_STATUS_FULL	include\openboxS28.h	110;"	d
FAST_PORT_NEG_STATUS_HALF	include\openboxS28.h	109;"	d
FAST_PORT_NEG_STATUS_UP	include\openboxS28.h	111;"	d
FAST_PORT_OFT	include\openboxS28.h	53;"	d
FAST_PORT_PCS_MODE	include\openboxS28.h	100;"	d
FAST_PORT_PCS_STATUS	include\openboxS28.h	101;"	d
FAST_PORT_PCS_STATUS_AUTONEG_EN	include\openboxS28.h	103;"	d
FAST_PORT_PCS_STATUS_AUTONEG_OK	include\openboxS28.h	104;"	d
FAST_PORT_PCS_STATUS_LINK_OK	include\openboxS28.h	102;"	d
FAST_RULE_CNT	include\openboxS28.h	58;"	d
FAST_RULE_REG_RADDR	include\openboxS28.h	40;"	d
FAST_RULE_REG_VADDR	include\openboxS28.h	41;"	d
FAST_RULE_REG_WADDR	include\openboxS28.h	39;"	d
OBX_PCIE	include\openboxS28.h	30;"	d
REG_LEN	include\openboxS28.h	56;"	d
__OPENBOXS28_H__	include\openboxS28.h	28;"	d
BASE_ADDR	include\openboxS4.h	46;"	d
FAST_ACTION_REG_ADDR	include\openboxS4.h	26;"	d
FAST_COUNTS_RECV_BYTE_H	include\openboxS4.h	66;"	d
FAST_COUNTS_RECV_BYTE_L	include\openboxS4.h	65;"	d
FAST_COUNTS_RECV_PKT_H	include\openboxS4.h	71;"	d
FAST_COUNTS_RECV_PKT_L	include\openboxS4.h	70;"	d
FAST_COUNTS_SEND_BYTE_H	include\openboxS4.h	68;"	d
FAST_COUNTS_SEND_BYTE_L	include\openboxS4.h	67;"	d
FAST_COUNTS_SEND_PKT_H	include\openboxS4.h	73;"	d
FAST_COUNTS_SEND_PKT_L	include\openboxS4.h	72;"	d
FAST_DEBUG_DC_DATA_CACHE_STATUS	include\openboxS4.h	123;"	d
FAST_DEBUG_DC_IN_DATA_CACHE_COUNT	include\openboxS4.h	124;"	d
FAST_DEBUG_DC_OUT_DATA_CACHE_COUNT	include\openboxS4.h	125;"	d
FAST_DEBUG_GAC_GAC_STATUS	include\openboxS4.h	109;"	d
FAST_DEBUG_GAC_IN_GAC_DATA_COUNT	include\openboxS4.h	110;"	d
FAST_DEBUG_GAC_IN_GAC_MD_COUNT	include\openboxS4.h	111;"	d
FAST_DEBUG_GAC_IN_GAC_PHY_COUNT	include\openboxS4.h	112;"	d
FAST_DEBUG_GAC_OUT_GAC_DATA_COUNT	include\openboxS4.h	113;"	d
FAST_DEBUG_GAC_OUT_GAC_PHY_COUNT	include\openboxS4.h	114;"	d
FAST_DEBUG_GKE_GKE_STATUS	include\openboxS4.h	91;"	d
FAST_DEBUG_GKE_IN_GKE_MD_COUNT	include\openboxS4.h	92;"	d
FAST_DEBUG_GKE_IN_GKE_PHY_COUNT	include\openboxS4.h	93;"	d
FAST_DEBUG_GKE_OUT_GKE_KEY_COUNT	include\openboxS4.h	96;"	d
FAST_DEBUG_GKE_OUT_GKE_MD_COUNT	include\openboxS4.h	94;"	d
FAST_DEBUG_GKE_OUT_GKE_PHY_COUNT	include\openboxS4.h	95;"	d
FAST_DEBUG_GME_GME_STATUS	include\openboxS4.h	99;"	d
FAST_DEBUG_GME_IN_GME_INDEX_COUNT	include\openboxS4.h	103;"	d
FAST_DEBUG_GME_IN_GME_KEY_COUNT	include\openboxS4.h	102;"	d
FAST_DEBUG_GME_IN_GME_MD_COUNT	include\openboxS4.h	100;"	d
FAST_DEBUG_GME_IN_GME_PHY_COUNT	include\openboxS4.h	101;"	d
FAST_DEBUG_GME_OUT_GME_KEY_COUNT	include\openboxS4.h	106;"	d
FAST_DEBUG_GME_OUT_GME_MD_COUNT	include\openboxS4.h	104;"	d
FAST_DEBUG_GME_OUT_GME_PHY_COUNT	include\openboxS4.h	105;"	d
FAST_DEBUG_GOE_GOE_STATUS	include\openboxS4.h	117;"	d
FAST_DEBUG_GOE_IN_GOE_DATA_COUNT	include\openboxS4.h	118;"	d
FAST_DEBUG_GOE_IN_GOE_PHY_COUNT	include\openboxS4.h	119;"	d
FAST_DEBUG_GOE_OUT_GOE_DATA_COUNT	include\openboxS4.h	120;"	d
FAST_DEBUG_GPP_GPP_STATUS	include\openboxS4.h	84;"	d
FAST_DEBUG_GPP_IN_GPP_DATA_COUNT	include\openboxS4.h	85;"	d
FAST_DEBUG_GPP_OUT_GPP_CACHE_COUNT	include\openboxS4.h	88;"	d
FAST_DEBUG_GPP_OUT_GPP_MD_COUNT	include\openboxS4.h	86;"	d
FAST_DEBUG_GPP_OUT_GPP_PHY_COUNT	include\openboxS4.h	87;"	d
FAST_DEBUG_UM_DC	include\openboxS4.h	77;"	d
FAST_DEBUG_UM_GAC	include\openboxS4.h	81;"	d
FAST_DEBUG_UM_GKE	include\openboxS4.h	79;"	d
FAST_DEBUG_UM_GME	include\openboxS4.h	80;"	d
FAST_DEBUG_UM_GOE	include\openboxS4.h	82;"	d
FAST_DEBUG_UM_GPP	include\openboxS4.h	78;"	d
FAST_DEFAULT_RULE_ADDR	include\openboxS4.h	27;"	d
FAST_HW_LOOKUP	include\openboxS4.h	51;"	d
FAST_HW_REG_VERSION	include\openboxS4.h	23;"	d
FAST_HW_SYS	include\openboxS4.h	49;"	d
FAST_HW_UM	include\openboxS4.h	50;"	d
FAST_PORT_BASE	include\openboxS4.h	43;"	d
FAST_PORT_OFT	include\openboxS4.h	44;"	d
FAST_RULE_CNT	include\openboxS4.h	62;"	d
FAST_RULE_REG_RADDR	include\openboxS4.h	31;"	d
FAST_RULE_REG_WADDR	include\openboxS4.h	30;"	d
REG_LEN	include\openboxS4.h	47;"	d
__OPENBOXS4_H__	include\openboxS4.h	20;"	d
BASE_ADDR	include\xdl_debug.h	30;"	d
FAST_ACTION_REG_ADDR	include\xdl_debug.h	36;"	d
FAST_COUNTS_RECV_BYTE_L	include\xdl_debug.h	41;"	d
FAST_COUNTS_RECV_PKT_L	include\xdl_debug.h	43;"	d
FAST_COUNTS_SEND_BYTE_L	include\xdl_debug.h	42;"	d
FAST_COUNTS_SEND_PKT_L	include\xdl_debug.h	44;"	d
FAST_DEFAULT_RULE_ADDR	include\xdl_debug.h	37;"	d
FAST_HW_REG_VERSION	include\xdl_debug.h	29;"	d
FAST_PORT_BASE	include\xdl_debug.h	38;"	d
FAST_PORT_OFT	include\xdl_debug.h	39;"	d
FAST_RULE_CNT	include\xdl_debug.h	32;"	d
FAST_RULE_REG_RADDR	include\xdl_debug.h	33;"	d
FAST_RULE_REG_VADDR	include\xdl_debug.h	34;"	d
FAST_RULE_REG_WADDR	include\xdl_debug.h	35;"	d
REG_LEN	include\xdl_debug.h	31;"	d
__XDL_DEBUG_H__	include\xdl_debug.h	27;"	d
AMS_CLK	lib\libams\main_libams.c	39;"	d	file:
AMS_MAX_PKTS	lib\libams\main_libams.c	38;"	d	file:
C	lib\libams\main_libams.c	/^		C:1,$/;"	m	struct:fast_ams_head	file:
S	lib\libams\main_libams.c	/^		S:1,$/;"	m	struct:fast_ams_head	file:
UM_CLK	lib\libams\main_libams.c	40;"	d	file:
W	lib\libams\main_libams.c	/^		W:1,$/;"	m	struct:fast_ams_head	file:
ams_pkt_count	lib\libams\main_libams.c	/^int ams_pkt_count = 0;$/;"	v
ctl	lib\libams\main_libams.c	/^	u64 ctl;$/;"	m	struct:fast_ams_head	file:
delay	lib\libams\main_libams.c	/^	u64 delay;$/;"	m	struct:fast_ams_head	file:
fase_ams_check	lib\libams\main_libams.c	/^int fase_ams_check(void)$/;"	f
fast_ams_alloc	lib\libams\main_libams.c	/^int fast_ams_alloc(void)$/;"	f
fast_ams_computer	lib\libams\main_libams.c	/^int fast_ams_computer(struct fast_packet *recv_pkt[],u64 pkt_ts_result[],int count)$/;"	f
fast_ams_free	lib\libams\main_libams.c	/^void fast_ams_free(void)$/;"	f
fast_ams_head	lib\libams\main_libams.c	/^struct fast_ams_head$/;"	s	file:
fast_ams_send	lib\libams\main_libams.c	/^int fast_ams_send(struct fast_packet *send_pkt[],u64 pkt_space_ts[],int count)$/;"	f
fast_ams_start	lib\libams\main_libams.c	/^void fast_ams_start(void)$/;"	f
id	lib\libams\main_libams.c	/^	u64 id:16,$/;"	m	struct:fast_ams_head	file:
reserve	lib\libams\main_libams.c	/^		reserve:32,$/;"	m	struct:fast_ams_head	file:
reserve2	lib\libams\main_libams.c	/^		reserve2:13;$/;"	m	struct:fast_ams_head	file:
send_pkt_ts	lib\libams\main_libams.c	/^u64 send_pkt_ts[AMS_MAX_PKTS];$/;"	v
ts	lib\libams\main_libams.c	/^	u64 ts;$/;"	m	struct:fast_ams_head	file:
MASK_1	lib\libant\main_libant.c	35;"	d	file:
PGM_MID	lib\libant\main_libant.c	31;"	d	file:
PGM_RD_MID	lib\libant\main_libant.c	33;"	d	file:
PGM_WR_MID	lib\libant\main_libant.c	32;"	d	file:
SCM_MID	lib\libant\main_libant.c	30;"	d	file:
ant_check_finish	lib\libant\main_libant.c	/^int ant_check_finish()$/;"	f
ant_collect_counters	lib\libant\main_libant.c	/^int ant_collect_counters(struct ant_cnt *outc)$/;"	f
ant_get_lat_flag	lib\libant\main_libant.c	/^int ant_get_lat_flag(u64 *regvalue)$/;"	f
ant_get_lat_pkt_cnt	lib\libant\main_libant.c	/^int ant_get_lat_pkt_cnt(u64 *regvalue)$/;"	f
ant_get_lat_pkt_reg	lib\libant\main_libant.c	/^int ant_get_lat_pkt_reg(u64 *regvalue)$/;"	f
ant_get_n_rtt	lib\libant\main_libant.c	/^int ant_get_n_rtt(u64 *regvalue)$/;"	f
ant_get_proto_type	lib\libant\main_libant.c	/^int ant_get_proto_type(u64 *regvalue)$/;"	f
ant_get_rd_soft_rst	lib\libant\main_libant.c	/^int ant_get_rd_soft_rst(u64 *regvalue)$/;"	f
ant_get_scm_bit_cnt	lib\libant\main_libant.c	/^int ant_get_scm_bit_cnt(u64 *regvalue)$/;"	f
ant_get_scm_pkt_cnt	lib\libant\main_libant.c	/^int ant_get_scm_pkt_cnt(u64 *regvalue)$/;"	f
ant_get_scm_soft_rst	lib\libant\main_libant.c	/^int ant_get_scm_soft_rst(u64 *regvalue)$/;"	f
ant_get_sent_bit_cnt	lib\libant\main_libant.c	/^int ant_get_sent_bit_cnt(u64 *regvalue)$/;"	f
ant_get_sent_pkt_cnt	lib\libant\main_libant.c	/^int ant_get_sent_pkt_cnt(u64 *regvalue)$/;"	f
ant_get_sent_rate_cnt	lib\libant\main_libant.c	/^int ant_get_sent_rate_cnt(u64 *regvalue)$/;"	f
ant_get_sent_rate_reg	lib\libant\main_libant.c	/^int ant_get_sent_rate_reg(u64 *regvalue)$/;"	f
ant_get_sent_time_cnt	lib\libant\main_libant.c	/^int ant_get_sent_time_cnt(u64 *regvalue)$/;"	f
ant_get_sent_time_reg	lib\libant\main_libant.c	/^int ant_get_sent_time_reg(u64 *regvalue)$/;"	f
ant_pkt_send	lib\libant\main_libant.c	/^int ant_pkt_send(struct fast_packet *pkt, int pkt_len)$/;"	f
ant_print_counters	lib\libant\main_libant.c	/^void ant_print_counters(struct ant_cnt a_cnt, int len){$/;"	f
ant_rst	lib\libant\main_libant.c	/^int ant_rst(){$/;"	f
ant_set_lat_flag	lib\libant\main_libant.c	/^int ant_set_lat_flag(u64 regvalue)$/;"	f
ant_set_lat_pkt_cnt	lib\libant\main_libant.c	/^int ant_set_lat_pkt_cnt(u64 regvalue)$/;"	f
ant_set_lat_pkt_reg	lib\libant\main_libant.c	/^int ant_set_lat_pkt_reg(u64 regvalue)$/;"	f
ant_set_n_rtt	lib\libant\main_libant.c	/^int ant_set_n_rtt(u64 regvalue)$/;"	f
ant_set_proto_type	lib\libant\main_libant.c	/^int ant_set_proto_type(u64 regvalue)$/;"	f
ant_set_rd_soft_rst	lib\libant\main_libant.c	/^int ant_set_rd_soft_rst(u64 regvalue)$/;"	f
ant_set_scm_bit_cnt	lib\libant\main_libant.c	/^int ant_set_scm_bit_cnt(u64 regvalue)$/;"	f
ant_set_scm_pkt_cnt	lib\libant\main_libant.c	/^int ant_set_scm_pkt_cnt(u64 regvalue)$/;"	f
ant_set_scm_soft_rst	lib\libant\main_libant.c	/^int ant_set_scm_soft_rst(u64 regvalue)$/;"	f
ant_set_sent_bit_cnt	lib\libant\main_libant.c	/^int ant_set_sent_bit_cnt(u64 regvalue)$/;"	f
ant_set_sent_pkt_cnt	lib\libant\main_libant.c	/^int ant_set_sent_pkt_cnt(u64 regvalue)$/;"	f
ant_set_sent_rate_cnt	lib\libant\main_libant.c	/^int ant_set_sent_rate_cnt(u64 regvalue)$/;"	f
ant_set_sent_rate_reg	lib\libant\main_libant.c	/^int ant_set_sent_rate_reg(u64 regvalue)$/;"	f
ant_set_sent_time_cnt	lib\libant\main_libant.c	/^int ant_set_sent_time_cnt(u64 regvalue)$/;"	f
ant_set_sent_time_reg	lib\libant\main_libant.c	/^int ant_set_sent_time_reg(u64 regvalue)$/;"	f
ant_set_test_para	lib\libant\main_libant.c	/^int ant_set_test_para(struct ant_parameter antp)$/;"	f
import_latency_to_txt	lib\libant\main_libant.c	/^int import_latency_to_txt(){$/;"	f
OFP_MAX_RULE_CNT	lib\libofp\main_libofp.c	39;"	d	file:
__ofp_exit	lib\libofp\main_libofp.c	/^void __ofp_exit(int argc)$/;"	f
aging_rule_sw	lib\libofp\main_libofp.c	/^void *aging_rule_sw(void *argv)$/;"	f
aging_rule_time	lib\libofp\main_libofp.c	/^struct timeval aging_rule_time[OFP_MAX_RULE_CNT] = {0};\/*规则的老化时间记录*\/$/;"	v	typeref:struct:timeval
build_ofp_header	lib\libofp\main_libofp.c	/^void build_ofp_header(struct ofp_header *ofpbuf_header,uint16_t len,uint8_t type,uint32_t xid)$/;"	f
build_reply_ofpbuf	lib\libofp\main_libofp.c	/^u8 *build_reply_ofpbuf(uint8_t type,uint32_t xid,uint16_t len)$/;"	f
close_openflow_connect	lib\libofp\main_libofp.c	/^void close_openflow_connect()$/;"	f
controller_ip	lib\libofp\main_libofp.c	/^char controller_ip[256] = {0};	\/*OpenFlow 控制器IP地址,可以IPv6,也可以IPv6,地址由运行参数(-4|-6)输入,由此变量保存*\/$/;"	v
controller_port	lib\libofp\main_libofp.c	/^u32 controller_port = 6653; \/*默认floodlight,6633:OpenDayLight*\/$/;"	v
fast_PORT_reg_rd	lib\libofp\main_libofp.c	/^u64 fast_PORT_reg_rd(u8 port,u32 regaddr)$/;"	f
fl_connect	lib\libofp\main_libofp.c	/^int fl_connect = 0;\/*记录是否已经和控制器建立连接*\/$/;"	v
flow_stats_addr	lib\libofp\main_libofp.c	/^u64 *flow_stats_addr[OFP_MAX_RULE_CNT] = {0};\/*用于存储控制器下发的每条flow_mod消息所对应的flow_stats消息地址*\/$/;"	v
flow_stats_time	lib\libofp\main_libofp.c	/^struct timeval flow_stats_time[OFP_MAX_RULE_CNT] = {0};\/*用于记录流表下发的时间,后面用来统计流表时长*\/$/;"	v	typeref:struct:timeval
g_port_idx	lib\libofp\main_libofp.c	/^static int g_port_idx = 0;$/;"	v	file:
get_dev_ip6	lib\libofp\main_libofp.c	/^void get_dev_ip6(char *if_name,struct in6_addr *addr6)$/;"	f
get_dev_mac	lib\libofp\main_libofp.c	/^void get_dev_mac(char *if_name,char *hw_addr)$/;"	f
get_name	lib\libofp\main_libofp.c	/^char *get_name(char *name,char *buf)$/;"	f
get_phy_port	lib\libofp\main_libofp.c	/^int get_phy_port(char *port_name)$/;"	f
get_phyport_by_logport	lib\libofp\main_libofp.c	/^u8 get_phyport_by_logport(u32 logport)$/;"	f
get_value_by_shell	lib\libofp\main_libofp.c	/^char *get_value_by_shell(char *cmd)$/;"	f
handle_barrier_request	lib\libofp\main_libofp.c	/^handle_barrier_request(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_echo_request	lib\libofp\main_libofp.c	/^handle_echo_request(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_error	lib\libofp\main_libofp.c	/^handle_error(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_experimenter	lib\libofp\main_libofp.c	/^handle_experimenter(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_features_request	lib\libofp\main_libofp.c	/^handle_features_request(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_flow_mod	lib\libofp\main_libofp.c	/^handle_flow_mod(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_flow_mod_add	lib\libofp\main_libofp.c	/^handle_flow_mod_add(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_flow_mod_delete	lib\libofp\main_libofp.c	/^handle_flow_mod_delete(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_get_async_request	lib\libofp\main_libofp.c	/^handle_get_async_request(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_get_config_request	lib\libofp\main_libofp.c	/^handle_get_config_request(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_group_mod	lib\libofp\main_libofp.c	/^handle_group_mod(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_hello	lib\libofp\main_libofp.c	/^handle_hello(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_meter_mod	lib\libofp\main_libofp.c	/^handle_meter_mod(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_multipart_request	lib\libofp\main_libofp.c	/^handle_multipart_request(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_aggregate	lib\libofp\main_libofp.c	/^handle_ofpmp_aggregate(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_desc	lib\libofp\main_libofp.c	/^handle_ofpmp_desc(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_flow_stats	lib\libofp\main_libofp.c	/^handle_ofpmp_flow_stats(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_group_features	lib\libofp\main_libofp.c	/^handle_ofpmp_group_features(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_port_desc	lib\libofp\main_libofp.c	/^handle_ofpmp_port_desc(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_port_stats	lib\libofp\main_libofp.c	/^handle_ofpmp_port_stats(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_table	lib\libofp\main_libofp.c	/^handle_ofpmp_table(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_table_features	lib\libofp\main_libofp.c	/^handle_ofpmp_table_features(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_ofpmp_unsupported	lib\libofp\main_libofp.c	/^handle_ofpmp_unsupported(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_openflow	lib\libofp\main_libofp.c	/^handle_openflow(struct ofp_buffer *ofpbuf,int len)$/;"	f	file:
handle_packet_out	lib\libofp\main_libofp.c	/^handle_packet_out(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_pcap_packet	lib\libofp\main_libofp.c	/^void handle_pcap_packet(int inport,struct eth_header *eth,int len)$/;"	f
handle_port_mod	lib\libofp\main_libofp.c	/^handle_port_mod(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_queue_get_config_request	lib\libofp\main_libofp.c	/^handle_queue_get_config_request(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_role_request	lib\libofp\main_libofp.c	/^handle_role_request(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_set_async	lib\libofp\main_libofp.c	/^handle_set_async(struct ofp_buffer *ofpbuf)$/;"	f	file:
handle_set_config	lib\libofp\main_libofp.c	/^handle_set_config(struct ofp_buffer *ofpbuf,int len)$/;"	f	file:
handle_table_mod	lib\libofp\main_libofp.c	/^handle_table_mod(struct ofp_buffer *ofpbuf)$/;"	f	file:
htonll	lib\libofp\main_libofp.c	/^htonll(uint64_t n)$/;"	f	file:
init_port	lib\libofp\main_libofp.c	/^void init_port(void)$/;"	f
ip_type	lib\libofp\main_libofp.c	/^int ip_type = 4;			\/*默认使用IPv4的地址*\/$/;"	v
magicrouter_strlcpy	lib\libofp\main_libofp.c	/^void magicrouter_strlcpy(char *dst, const char *src, size_t size)$/;"	f
md5	lib\libofp\main_libofp.c	/^MD5_CTX  md5;$/;"	v
md5_value	lib\libofp\main_libofp.c	/^u8 md5_value[16] = {0};$/;"	v
nmps	lib\libofp\main_libofp.c	/^struct nms_ports_info nmps; \/*系统端口详细信息,保存端口名称,状态,统计计数,本端口IP,网关IP,网关MAC,本机MAC,libpcap句柄,libnet句柄,发送互斥锁*\/$/;"	v	typeref:struct:nms_ports_info
nms_exec_action	lib\libofp\main_libofp.c	/^void nms_exec_action(u32 inport,u32 outport,struct eth_header *eth,int len,int hit_idx)$/;"	f
ntohll	lib\libofp\main_libofp.c	/^ntohll(uint64_t n)$/;"	f	file:
ofp_exit	lib\libofp\main_libofp.c	/^void ofp_exit(void)$/;"	f
ofp_init	lib\libofp\main_libofp.c	/^int ofp_init(int argc,char *argv[])$/;"	f
ofpfd	lib\libofp\main_libofp.c	/^int ofpfd;					\/*OpenFlow Socket 操作句柄*\/$/;"	v
open_openflow_connect	lib\libofp\main_libofp.c	/^void open_openflow_connect(char *controller_ip)$/;"	f
openflow_listener	lib\libofp\main_libofp.c	/^pthread_t openflow_listener(char *controller_ip)$/;"	f
parse_options	lib\libofp\main_libofp.c	/^void parse_options(int argc,char *argv[])$/;"	f
pcap_packet	lib\libofp\main_libofp.c	/^void *pcap_packet(void *argv)$/;"	f
pkt_print	lib\libofp\main_libofp.c	/^void pkt_print(u8 *pkt,int pkt_len)$/;"	f
port_list_info	lib\libofp\main_libofp.c	/^char port_list_info[256] = {0};   \/*系统运行端口列表,由运行参数(-i)输入,由此变量保存*\/$/;"	v
read_port_stats	lib\libofp\main_libofp.c	/^void read_port_stats(char ifname[6],u8 port,u8 flag,struct ofp_port_stats *of_stats)$/;"	f
read_port_stats_fromFILE	lib\libofp\main_libofp.c	/^void read_port_stats_fromFILE(char ifname[6],u8 port,struct ofp_port_stats *of_stats)$/;"	f
read_port_stats_fromREG	lib\libofp\main_libofp.c	/^void read_port_stats_fromREG(char ifname[6],u8 port,struct ofp_port_stats *of_stats)$/;"	f
read_port_status	lib\libofp\main_libofp.c	/^void read_port_status(char ifname[6],u8 port,u8 flag,struct ofp_port *of_state)$/;"	f
recv_openflow_message	lib\libofp\main_libofp.c	/^void *recv_openflow_message(void *argv)$/;"	f
send_eth_packet_out	lib\libofp\main_libofp.c	/^void send_eth_packet_out(u32 inport,u32 outport,struct eth_header *eth,int len,int hit_idx)$/;"	f
send_hello_message	lib\libofp\main_libofp.c	/^void send_hello_message()$/;"	f
send_openflow_message	lib\libofp\main_libofp.c	/^void send_openflow_message(struct ofp_buffer *ofpmsg,int len)$/;"	f
send_packet_in_message	lib\libofp\main_libofp.c	/^void send_packet_in_message(int in_port,u8 *pkt,int len,int reason)$/;"	f
send_packet_in_message_lldp	lib\libofp\main_libofp.c	/^void send_packet_in_message_lldp(int in_port,u8 *pkt,int len)$/;"	f
send_packet_in_message_meter	lib\libofp\main_libofp.c	/^void send_packet_in_message_meter(int in_port,u8 *pkt,int len)$/;"	f
send_packet_in_message_normal	lib\libofp\main_libofp.c	/^void send_packet_in_message_normal(u32 in_port,u8 *pkt,int len)$/;"	f
show_oxm_value	lib\libofp\main_libofp.c	/^void show_oxm_value(struct ofp_oxm *oxm)$/;"	f
skipline	lib\libofp\main_libofp.c	/^void skipline(FILE *f)   $/;"	f
start_aging_rule	lib\libofp\main_libofp.c	/^void start_aging_rule(void)$/;"	f
start_pcap	lib\libofp\main_libofp.c	/^void start_pcap(int port)$/;"	f
start_port_info_update	lib\libofp\main_libofp.c	/^void start_port_info_update(void)$/;"	f
start_port_pcap	lib\libofp\main_libofp.c	/^void start_port_pcap(void)$/;"	f
start_tv	lib\libofp\main_libofp.c	/^struct timeval start_tv;	\/*系统开始运行时间*\/$/;"	v	typeref:struct:timeval
sw_lookup_action	lib\libofp\main_libofp.c	/^u32 sw_lookup_action(struct flow *key)$/;"	f
sw_lookup_exec	lib\libofp\main_libofp.c	/^int sw_lookup_exec(u32 inport,struct eth_header *pkt,int len)$/;"	f
thread_idx	lib\libofp\main_libofp.c	/^static u8 thread_idx = 1;   \/*启动线程号标识,用来控制每个线程打印输出的颜色*\/$/;"	v	file:
update_port_info	lib\libofp\main_libofp.c	/^void *update_port_info(void *argv)$/;"	f
usage	lib\libofp\main_libofp.c	/^void usage(char *argv)$/;"	f
BLUE	lib\libofp\main_libofp.h	62;"	d
BROWN	lib\libofp\main_libofp.h	69;"	d
CYAN	lib\libofp\main_libofp.h	65;"	d
DARY_GRAY	lib\libofp\main_libofp.h	64;"	d
DIV_ROUND_UP	lib\libofp\main_libofp.h	131;"	d
GREEN	lib\libofp\main_libofp.h	60;"	d
IDX	lib\libofp\main_libofp.h	88;"	d
LIGHT_BLUE	lib\libofp\main_libofp.h	63;"	d
LIGHT_CYAN	lib\libofp\main_libofp.h	66;"	d
LIGHT_GRAY	lib\libofp\main_libofp.h	71;"	d
LIGHT_GREEN	lib\libofp\main_libofp.h	61;"	d
LIGHT_PURPLE	lib\libofp\main_libofp.h	68;"	d
LIGHT_RED	lib\libofp\main_libofp.h	59;"	d
LOG_DBG	lib\libofp\main_libofp.h	96;"	d
LOG_ERR	lib\libofp\main_libofp.h	108;"	d
MAX_IF_CNT	lib\libofp\main_libofp.h	45;"	d
MAX_NEIGH_CNT	lib\libofp\main_libofp.h	47;"	d
MAX_RULE_CNT	lib\libofp\main_libofp.h	46;"	d
NMS_METER	lib\libofp\main_libofp.h	39;"	d
NONE	lib\libofp\main_libofp.h	57;"	d
PRINT	lib\libofp\main_libofp.h	90;"	d
PURPLE	lib\libofp\main_libofp.h	67;"	d
P_COLOR	lib\libofp\main_libofp.h	/^static char P_COLOR[MAX_IF_CNT][24]  = $/;"	v
RED	lib\libofp\main_libofp.h	58;"	d
ROUND_UP	lib\libofp\main_libofp.h	132;"	d
SHOW_FUN	lib\libofp\main_libofp.h	115;"	d
WHITE	lib\libofp\main_libofp.h	72;"	d
YELLOW	lib\libofp\main_libofp.h	70;"	d
_DBG	lib\libofp\main_libofp.h	/^	_DBG = 1<<1,$/;"	e	enum:__anon13
_ERR	lib\libofp\main_libofp.h	/^	_ERR = 1<<2,$/;"	e	enum:__anon13
_FUN	lib\libofp\main_libofp.h	/^	_FUN = 1<<0,$/;"	e	enum:__anon13
__MAIN_LIBOFP_H__	lib\libofp\main_libofp.h	27;"	d
__oft	lib\libofp\main_libofp.h	/^static int __oft = 3;$/;"	v
cnt	lib\libofp\main_libofp.h	/^	int cnt;	$/;"	m	struct:nms_ports_info
collisions	lib\libofp\main_libofp.h	/^	unsigned long collisions;$/;"	m	struct:netdev_stats
data	lib\libofp\main_libofp.h	/^	u8 data[0];$/;"	m	struct:eth_header
data	lib\libofp\main_libofp.h	/^	u8 data[0];$/;"	m	struct:ofp_buffer
data	lib\libofp\main_libofp.h	/^	u8 data[60];$/;"	m	struct:meter_buffer
debug	lib\libofp\main_libofp.h	/^static int debug = 0xFFF;\/*默认不输出任何打印信息*\/$/;"	v
dmac	lib\libofp\main_libofp.h	/^	u8 dmac[6];$/;"	m	struct:eth_header
eth_header	lib\libofp\main_libofp.h	/^struct eth_header$/;"	s
frame	lib\libofp\main_libofp.h	/^	u16 frame;$/;"	m	struct:eth_header
gw	lib\libofp\main_libofp.h	/^		u8 gw[16];$/;"	m	union:nms_port::__anon15
gw_ip4	lib\libofp\main_libofp.h	/^		u32 gw_ip4;$/;"	m	union:nms_port::__anon15
gw_ip6	lib\libofp\main_libofp.h	/^		struct in6_addr gw_ip6;$/;"	m	union:nms_port::__anon15	typeref:struct:nms_port::__anon15::in6_addr
gw_value	lib\libofp\main_libofp.h	/^		u64 gw_value[2];$/;"	m	union:nms_port::__anon15
gwmac	lib\libofp\main_libofp.h	/^	u8 gwmac[6];$/;"	m	struct:nms_port
header	lib\libofp\main_libofp.h	/^	struct ofp_header header;$/;"	m	struct:ofp_buffer	typeref:struct:ofp_buffer::ofp_header
in_port	lib\libofp\main_libofp.h	/^	u8 in_port;$/;"	m	struct:meter_buffer
ip	lib\libofp\main_libofp.h	/^		u8 ip[16];$/;"	m	union:nms_port::__anon14
logport	lib\libofp\main_libofp.h	/^	u32 logport;$/;"	m	struct:nms_port
meter_buffer	lib\libofp\main_libofp.h	/^struct meter_buffer$/;"	s
name	lib\libofp\main_libofp.h	/^	u8 name[16];$/;"	m	struct:nms_port
net	lib\libofp\main_libofp.h	/^	libnet_t *net;$/;"	m	struct:nms_port
netdev_stats	lib\libofp\main_libofp.h	/^struct netdev_stats {$/;"	s
nms_port	lib\libofp\main_libofp.h	/^struct nms_port$/;"	s
nms_ports_info	lib\libofp\main_libofp.h	/^struct nms_ports_info$/;"	s
ofp_buffer	lib\libofp\main_libofp.h	/^struct ofp_buffer$/;"	s
old_state	lib\libofp\main_libofp.h	/^	u32 old_state;$/;"	m	struct:nms_port
pad	lib\libofp\main_libofp.h	/^	u8 pad[3];$/;"	m	struct:meter_buffer
pcap	lib\libofp\main_libofp.h	/^	pcap_t *pcap;$/;"	m	struct:nms_port
phyport	lib\libofp\main_libofp.h	/^	u32 phyport;$/;"	m	struct:nms_port
port_ip4	lib\libofp\main_libofp.h	/^		u32 port_ip4;$/;"	m	union:nms_port::__anon14
port_ip6	lib\libofp\main_libofp.h	/^		struct in6_addr port_ip6;$/;"	m	union:nms_port::__anon14	typeref:struct:nms_port::__anon14::in6_addr
port_mac	lib\libofp\main_libofp.h	/^	u8 port_mac[6];$/;"	m	struct:nms_port
port_send_mutex	lib\libofp\main_libofp.h	/^	pthread_mutex_t port_send_mutex;$/;"	m	struct:nms_port
ports	lib\libofp\main_libofp.h	/^	struct nms_port ports[MAX_IF_CNT];$/;"	m	struct:nms_ports_info	typeref:struct:nms_ports_info::nms_port
print_idx_nms	lib\libofp\main_libofp.h	/^static int print_idx_nms[MAX_IF_CNT] = {0};$/;"	v
rx_bytes	lib\libofp\main_libofp.h	/^	unsigned long long rx_bytes;  \/* total bytes received         *\/$/;"	m	struct:netdev_stats
rx_compressed	lib\libofp\main_libofp.h	/^	unsigned long rx_compressed;$/;"	m	struct:netdev_stats
rx_crc_errors	lib\libofp\main_libofp.h	/^	unsigned long rx_crc_errors;  \/* recved pkt with crc error    *\/$/;"	m	struct:netdev_stats
rx_dropped	lib\libofp\main_libofp.h	/^	unsigned long rx_dropped;     \/* no space in linux buffers    *\/$/;"	m	struct:netdev_stats
rx_errors	lib\libofp\main_libofp.h	/^	unsigned long rx_errors;      \/* bad packets received         *\/$/;"	m	struct:netdev_stats
rx_fifo_errors	lib\libofp\main_libofp.h	/^	unsigned long rx_fifo_errors; \/* recv'r fifo overrun          *\/$/;"	m	struct:netdev_stats
rx_frame_errors	lib\libofp\main_libofp.h	/^	unsigned long rx_frame_errors;        \/* recv'd frame alignment error *\/$/;"	m	struct:netdev_stats
rx_length_errors	lib\libofp\main_libofp.h	/^	unsigned long rx_length_errors;$/;"	m	struct:netdev_stats
rx_missed_errors	lib\libofp\main_libofp.h	/^	unsigned long rx_missed_errors;       \/* receiver missed packet     *\/$/;"	m	struct:netdev_stats
rx_multicast	lib\libofp\main_libofp.h	/^	unsigned long rx_multicast;   \/* multicast packets received   *\/$/;"	m	struct:netdev_stats
rx_over_errors	lib\libofp\main_libofp.h	/^	unsigned long rx_over_errors; \/* receiver ring buff overflow  *\/$/;"	m	struct:netdev_stats
rx_packets	lib\libofp\main_libofp.h	/^	unsigned long long rx_packets;    \/* total packets received       *\/$/;"	m	struct:netdev_stats
smac	lib\libofp\main_libofp.h	/^	u8 smac[6];$/;"	m	struct:eth_header
speed	lib\libofp\main_libofp.h	/^	u16 speed;$/;"	m	struct:nms_port
state	lib\libofp\main_libofp.h	/^	struct ofp_port state;$/;"	m	struct:nms_port	typeref:struct:nms_port::ofp_port
stats	lib\libofp\main_libofp.h	/^	struct ofp_port_stats stats;$/;"	m	struct:nms_port	typeref:struct:nms_port::ofp_port_stats
ts	lib\libofp\main_libofp.h	/^	u32 ts;$/;"	m	struct:meter_buffer
tx_aborted_errors	lib\libofp\main_libofp.h	/^	unsigned long tx_aborted_errors;$/;"	m	struct:netdev_stats
tx_bytes	lib\libofp\main_libofp.h	/^	unsigned long long tx_bytes;  \/* total bytes transmitted      *\/$/;"	m	struct:netdev_stats
tx_carrier_errors	lib\libofp\main_libofp.h	/^	unsigned long tx_carrier_errors;$/;"	m	struct:netdev_stats
tx_compressed	lib\libofp\main_libofp.h	/^	unsigned long tx_compressed;$/;"	m	struct:netdev_stats
tx_dropped	lib\libofp\main_libofp.h	/^	unsigned long tx_dropped;     \/* no space available in linux  *\/$/;"	m	struct:netdev_stats
tx_errors	lib\libofp\main_libofp.h	/^	unsigned long tx_errors;      \/* packet transmit problems     *\/$/;"	m	struct:netdev_stats
tx_fifo_errors	lib\libofp\main_libofp.h	/^	unsigned long tx_fifo_errors;$/;"	m	struct:netdev_stats
tx_heartbeat_errors	lib\libofp\main_libofp.h	/^	unsigned long tx_heartbeat_errors;$/;"	m	struct:netdev_stats
tx_packets	lib\libofp\main_libofp.h	/^	unsigned long long tx_packets;        \/* total packets transmitted    *\/$/;"	m	struct:netdev_stats
tx_window_errors	lib\libofp\main_libofp.h	/^	unsigned long tx_window_errors;$/;"	m	struct:netdev_stats
updown	lib\libofp\main_libofp.h	/^	u16 updown;$/;"	m	struct:nms_port
MD5Decode	lib\libofp\md5.c	/^void MD5Decode(unsigned int *output,unsigned char *input,unsigned int len)  $/;"	f
MD5Encode	lib\libofp\md5.c	/^void MD5Encode(unsigned char *output,unsigned int *input,unsigned int len)  $/;"	f
MD5Final	lib\libofp\md5.c	/^void MD5Final(MD5_CTX *context,unsigned char digest[16])  $/;"	f
MD5Init	lib\libofp\md5.c	/^void MD5Init(MD5_CTX *context)  $/;"	f
MD5Transform	lib\libofp\md5.c	/^void MD5Transform(unsigned int state[4],unsigned char block[64])  $/;"	f
MD5Update	lib\libofp\md5.c	/^void MD5Update(MD5_CTX *context,unsigned char *input,unsigned int inputlen)  $/;"	f
PADDING	lib\libofp\md5.c	/^unsigned char PADDING[]={0x80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  $/;"	v
F	lib\libofp\md5.h	12;"	d
FF	lib\libofp\md5.h	18;"	d
G	lib\libofp\md5.h	13;"	d
GG	lib\libofp\md5.h	23;"	d
H	lib\libofp\md5.h	14;"	d
HH	lib\libofp\md5.h	28;"	d
I	lib\libofp\md5.h	15;"	d
II	lib\libofp\md5.h	33;"	d
MD5_CTX	lib\libofp\md5.h	/^}MD5_CTX;  $/;"	t	typeref:struct:__anon16
ROTATE_LEFT	lib\libofp\md5.h	16;"	d
__MD5_H__	lib\libofp\md5.h	2;"	d
buffer	lib\libofp\md5.h	/^	unsigned char buffer[64];     $/;"	m	struct:__anon16
count	lib\libofp\md5.h	/^	unsigned int count[2];  $/;"	m	struct:__anon16
state	lib\libofp\md5.h	/^	unsigned int state[4];  $/;"	m	struct:__anon16
DESC_STR_LEN	lib\libofp\ofp_v4.h	819;"	d
ETH_ALEN	lib\libofp\ofp_v4.h	80;"	d
ETH_P_LLDP	lib\libofp\ofp_v4.h	/^	ETH_P_LLDP = 0x88CC,$/;"	e	enum:eth_packet_type
ETH_P_XX	lib\libofp\ofp_v4.h	/^	ETH_P_XX = 0x8942,$/;"	e	enum:eth_packet_type
MAXLINE	lib\libofp\ofp_v4.h	30;"	d
NETDEV_F_100GB_FD	lib\libofp\ofp_v4.h	/^    NETDEV_F_100GB_FD =   1 << 8,  \/* 100 Gb full-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_100MB_FD	lib\libofp\ofp_v4.h	/^    NETDEV_F_100MB_FD =   1 << 3,  \/* 100 Mb full-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_100MB_HD	lib\libofp\ofp_v4.h	/^    NETDEV_F_100MB_HD =   1 << 2,  \/* 100 Mb half-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_10GB_FD	lib\libofp\ofp_v4.h	/^    NETDEV_F_10GB_FD =    1 << 6,  \/* 10 Gb full-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_10MB_FD	lib\libofp\ofp_v4.h	/^    NETDEV_F_10MB_FD =    1 << 1,  \/* 10 Mb full-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_10MB_HD	lib\libofp\ofp_v4.h	/^    NETDEV_F_10MB_HD =    1 << 0,  \/* 10 Mb half-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_1GB_FD	lib\libofp\ofp_v4.h	/^    NETDEV_F_1GB_FD =     1 << 5,  \/* 1 Gb full-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_1GB_HD	lib\libofp\ofp_v4.h	/^    NETDEV_F_1GB_HD =     1 << 4,  \/* 1 Gb half-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_1TB_FD	lib\libofp\ofp_v4.h	/^    NETDEV_F_1TB_FD =     1 << 9,  \/* 1 Tb full-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_40GB_FD	lib\libofp\ofp_v4.h	/^    NETDEV_F_40GB_FD =    1 << 7,  \/* 40 Gb full-duplex rate support. *\/$/;"	e	enum:netdev_features
NETDEV_F_AUTONEG	lib\libofp\ofp_v4.h	/^    NETDEV_F_AUTONEG =    1 << 13, \/* Auto-negotiation. *\/$/;"	e	enum:netdev_features
NETDEV_F_COPPER	lib\libofp\ofp_v4.h	/^    NETDEV_F_COPPER =     1 << 11, \/* Copper medium. *\/$/;"	e	enum:netdev_features
NETDEV_F_FIBER	lib\libofp\ofp_v4.h	/^    NETDEV_F_FIBER =      1 << 12, \/* Fiber medium. *\/$/;"	e	enum:netdev_features
NETDEV_F_OTHER	lib\libofp\ofp_v4.h	/^    NETDEV_F_OTHER =      1 << 10, \/* Other rate, not in the list. *\/$/;"	e	enum:netdev_features
NETDEV_F_PAUSE	lib\libofp\ofp_v4.h	/^    NETDEV_F_PAUSE =      1 << 14, \/* Pause. *\/$/;"	e	enum:netdev_features
NETDEV_F_PAUSE_ASYM	lib\libofp\ofp_v4.h	/^    NETDEV_F_PAUSE_ASYM = 1 << 15, \/* Asymmetric pause. *\/$/;"	e	enum:netdev_features
OFP10_VERSION	lib\libofp\ofp_v4.h	/^    OFP10_VERSION = 0x01,$/;"	e	enum:ofp_version
OFP11_VERSION	lib\libofp\ofp_v4.h	/^    OFP11_VERSION = 0x02,$/;"	e	enum:ofp_version
OFP12_VERSION	lib\libofp\ofp_v4.h	/^    OFP12_VERSION = 0x03,$/;"	e	enum:ofp_version
OFP13_VERSION	lib\libofp\ofp_v4.h	/^    OFP13_VERSION = 0x04,$/;"	e	enum:ofp_version
OFP14_VERSION	lib\libofp\ofp_v4.h	/^    OFP14_VERSION = 0x05,$/;"	e	enum:ofp_version
OFP15_VERSION	lib\libofp\ofp_v4.h	/^    OFP15_VERSION = 0x06$/;"	e	enum:ofp_version
OFPAT_COPY_TTL_IN	lib\libofp\ofp_v4.h	/^	OFPAT_COPY_TTL_IN = 12, \/* Copy TTL "inwards" -- from outermost to$/;"	e	enum:ofp_action_type
OFPAT_COPY_TTL_OUT	lib\libofp\ofp_v4.h	/^	OFPAT_COPY_TTL_OUT = 11, \/* Copy TTL "outwards" -- from next-to-outermost$/;"	e	enum:ofp_action_type
OFPAT_DEC_MPLS_TTL	lib\libofp\ofp_v4.h	/^	OFPAT_DEC_MPLS_TTL = 16, \/* Decrement MPLS TTL *\/$/;"	e	enum:ofp_action_type
OFPAT_DEC_NW_TTL	lib\libofp\ofp_v4.h	/^	OFPAT_DEC_NW_TTL = 24, \/* Decrement IP TTL. *\/$/;"	e	enum:ofp_action_type
OFPAT_EXPERIMENTER	lib\libofp\ofp_v4.h	/^	OFPAT_EXPERIMENTER = 0xffff$/;"	e	enum:ofp_action_type
OFPAT_GROUP	lib\libofp\ofp_v4.h	/^	OFPAT_GROUP = 22, \/* Apply group. *\/$/;"	e	enum:ofp_action_type
OFPAT_KEEP_RESOURCE	lib\libofp\ofp_v4.h	/^	OFPAT_KEEP_RESOURCE = 34,   \/*资源预留*\/$/;"	e	enum:ofp_action_type
OFPAT_OUTPUT	lib\libofp\ofp_v4.h	/^	OFPAT_OUTPUT = 0, \/* Output to switch port. *\/$/;"	e	enum:ofp_action_type
OFPAT_POP_MPLS	lib\libofp\ofp_v4.h	/^	OFPAT_POP_MPLS = 20, \/* Pop the outer MPLS tag *\/$/;"	e	enum:ofp_action_type
OFPAT_POP_PBB	lib\libofp\ofp_v4.h	/^	OFPAT_POP_PBB = 27, \/* Pop the outer PBB service tag (I-TAG) *\/$/;"	e	enum:ofp_action_type
OFPAT_POP_VLAN	lib\libofp\ofp_v4.h	/^	OFPAT_POP_VLAN = 18, \/* Pop the outer VLAN tag *\/$/;"	e	enum:ofp_action_type
OFPAT_PUSH_MPLS	lib\libofp\ofp_v4.h	/^	OFPAT_PUSH_MPLS = 19, \/* Push a new MPLS tag *\/$/;"	e	enum:ofp_action_type
OFPAT_PUSH_PBB	lib\libofp\ofp_v4.h	/^	OFPAT_PUSH_PBB = 26, \/* Push a new PBB service tag (I-TAG) *\/$/;"	e	enum:ofp_action_type
OFPAT_PUSH_VLAN	lib\libofp\ofp_v4.h	/^	OFPAT_PUSH_VLAN = 17, \/* Push a new VLAN tag *\/$/;"	e	enum:ofp_action_type
OFPAT_REPLACE_PROTO	lib\libofp\ofp_v4.h	/^	OFPAT_REPLACE_PROTO = 33,   \/*协议替换*\/$/;"	e	enum:ofp_action_type
OFPAT_SET_FIELD	lib\libofp\ofp_v4.h	/^	OFPAT_SET_FIELD = 25, \/* Set a header field using OXM TLV format. *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_MPLS_TTL	lib\libofp\ofp_v4.h	/^	OFPAT_SET_MPLS_TTL = 15, \/* MPLS TTL *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_NW_TTL	lib\libofp\ofp_v4.h	/^	OFPAT_SET_NW_TTL = 23, \/* IP TTL. *\/$/;"	e	enum:ofp_action_type
OFPAT_SET_QUEUE	lib\libofp\ofp_v4.h	/^	OFPAT_SET_QUEUE = 21, \/* Set queue id when outputting to a port *\/$/;"	e	enum:ofp_action_type
OFPBRC_BAD_EXPERIMENTER	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_EXPERIMENTER = 3, \/* Experimenter id not supported (in ofp_experimenter_header or ofp_multipart_request or ofp_multipart_reply). *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_EXP_TYPE	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_EXP_TYPE = 4, \/* Experimenter type not supported. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_LEN	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_LEN = 6, \/* Wrong request length for type. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_MULTIPART	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_MULTIPART = 2, \/* ofp_multipart_request.type not supported. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_PACKET	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_PACKET = 12, \/* Invalid packet in packet-out. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_PORT	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_PORT = 11, \/* Invalid port. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_TABLE_ID	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_TABLE_ID = 9, \/* Specified table-id invalid or does not exist. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_TYPE	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_TYPE = 1, \/* ofp_header.type not supported. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BAD_VERSION	lib\libofp\ofp_v4.h	/^	OFPBRC_BAD_VERSION = 0, \/* ofp_header.version not supported. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BUFFER_EMPTY	lib\libofp\ofp_v4.h	/^	OFPBRC_BUFFER_EMPTY = 7, \/* Specified buffer has already been used. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_BUFFER_UNKNOWN	lib\libofp\ofp_v4.h	/^	OFPBRC_BUFFER_UNKNOWN = 8, \/* Specified buffer does not exist. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_EPERM	lib\libofp\ofp_v4.h	/^	OFPBRC_EPERM = 5, \/* Permissions error. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_IS_SLAVE	lib\libofp\ofp_v4.h	/^	OFPBRC_IS_SLAVE = 10, \/* Denied because controller is slave. *\/$/;"	e	enum:ofp_bad_request_code
OFPBRC_MULTIPART_BUFFER_OVERFLOW	lib\libofp\ofp_v4.h	/^	OFPBRC_MULTIPART_BUFFER_OVERFLOW = 13, \/* ofp_multipart_request_flags*\/$/;"	e	enum:ofp_bad_request_code
OFPCR_ROLE_EQUAL	lib\libofp\ofp_v4.h	/^OFPCR_ROLE_EQUAL = 1, \/* Default role, full access. *\/$/;"	e	enum:ofp_controller_role
OFPCR_ROLE_MASTER	lib\libofp\ofp_v4.h	/^OFPCR_ROLE_MASTER = 2, \/* Full access, at most one master. *\/$/;"	e	enum:ofp_controller_role
OFPCR_ROLE_NOCHANGE	lib\libofp\ofp_v4.h	/^OFPCR_ROLE_NOCHANGE = 0, \/* Don¡¯t change current role. *\/$/;"	e	enum:ofp_controller_role
OFPCR_ROLE_SLAVE	lib\libofp\ofp_v4.h	/^OFPCR_ROLE_SLAVE = 3, \/* Read-only access. *\/$/;"	e	enum:ofp_controller_role
OFPERR_TEST	lib\libofp\ofp_v4.h	/^	OFPERR_TEST=1,$/;"	e	enum:ofperr
OFPET_BAD_ACTION	lib\libofp\ofp_v4.h	/^	OFPET_BAD_ACTION = 2, \/* Error in action description. *\/$/;"	e	enum:ofp_error_type
OFPET_BAD_INSTRUCTION	lib\libofp\ofp_v4.h	/^	OFPET_BAD_INSTRUCTION = 3, \/* Error in instruction list. *\/$/;"	e	enum:ofp_error_type
OFPET_BAD_MATCH	lib\libofp\ofp_v4.h	/^	OFPET_BAD_MATCH = 4, \/* Error in match. *\/$/;"	e	enum:ofp_error_type
OFPET_BAD_REQUEST	lib\libofp\ofp_v4.h	/^	OFPET_BAD_REQUEST = 1, \/* Request was not understood. *\/$/;"	e	enum:ofp_error_type
OFPET_EXPERIMENTER	lib\libofp\ofp_v4.h	/^	OFPET_EXPERIMENTER = 0xffff		\/* Experimenter error messages. *\/$/;"	e	enum:ofp_error_type
OFPET_FLOW_MOD_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_FLOW_MOD_FAILED = 5, \/* Problem modifying flow entry. *\/$/;"	e	enum:ofp_error_type
OFPET_GROUP_MOD_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_GROUP_MOD_FAILED = 6, \/* Problem modifying group entry. *\/$/;"	e	enum:ofp_error_type
OFPET_HELLO_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_HELLO_FAILED = 0, \/* Hello protocol failed. *\/$/;"	e	enum:ofp_error_type
OFPET_METER_MOD_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_METER_MOD_FAILED = 12, \/* Error in meter. *\/$/;"	e	enum:ofp_error_type
OFPET_PORT_MOD_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_PORT_MOD_FAILED = 7, \/* Port mod request failed. *\/$/;"	e	enum:ofp_error_type
OFPET_QUEUE_OP_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_QUEUE_OP_FAILED = 9, \/* Queue operation failed. *\/$/;"	e	enum:ofp_error_type
OFPET_ROLE_REQUEST_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_ROLE_REQUEST_FAILED = 11, \/* Controller Role request failed. *\/$/;"	e	enum:ofp_error_type
OFPET_SWITCH_CONFIG_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_SWITCH_CONFIG_FAILED = 10, \/* Switch config request failed. *\/$/;"	e	enum:ofp_error_type
OFPET_TABLE_FEATURES_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_TABLE_FEATURES_FAILED = 13, \/* Setting table features failed. *\/$/;"	e	enum:ofp_error_type
OFPET_TABLE_MOD_FAILED	lib\libofp\ofp_v4.h	/^	OFPET_TABLE_MOD_FAILED = 8, \/* Table mod request failed. *\/$/;"	e	enum:ofp_error_type
OFPFC_ADD	lib\libofp\ofp_v4.h	/^	OFPFC_ADD=0, \/* New flow. *\/$/;"	e	enum:ofp_flow_mod_command
OFPFC_DELETE	lib\libofp\ofp_v4.h	/^	OFPFC_DELETE= 3, \/* Delete all matching flows. *\/$/;"	e	enum:ofp_flow_mod_command
OFPFC_DELETE_STRICT	lib\libofp\ofp_v4.h	/^	OFPFC_DELETE_STRICT = 4, \/* Delete entry strictly matching wildcards and priority. *\/$/;"	e	enum:ofp_flow_mod_command
OFPFC_MODIFY	lib\libofp\ofp_v4.h	/^	OFPFC_MODIFY=1, \/* Modify all matching flows. *\/$/;"	e	enum:ofp_flow_mod_command
OFPFC_MODIFY_STRICT	lib\libofp\ofp_v4.h	/^	OFPFC_MODIFY_STRICT =2, \/* Modify entry strictly matching wildcards and priority. *\/	$/;"	e	enum:ofp_flow_mod_command
OFPIT_APPLY_ACTIONS	lib\libofp\ofp_v4.h	/^	OFPIT_APPLY_ACTIONS = 4, \/* Applies the action(s) immediately *\/$/;"	e	enum:ofp_instruction_type
OFPIT_CLEAR_ACTIONS	lib\libofp\ofp_v4.h	/^	OFPIT_CLEAR_ACTIONS = 5, \/* Clears all actions from the datapath$/;"	e	enum:ofp_instruction_type
OFPIT_EXPERIMENTER	lib\libofp\ofp_v4.h	/^	OFPIT_EXPERIMENTER = 0xFFFF \/* Experimenter instruction *\/$/;"	e	enum:ofp_instruction_type
OFPIT_GOTO_TABLE	lib\libofp\ofp_v4.h	/^	OFPIT_GOTO_TABLE = 1, \/* Setup the next table in the lookup$/;"	e	enum:ofp_instruction_type
OFPIT_METER	lib\libofp\ofp_v4.h	/^	OFPIT_METER = 6, \/* Apply meter (rate limiter) *\/$/;"	e	enum:ofp_instruction_type
OFPIT_WRITE_ACTIONS	lib\libofp\ofp_v4.h	/^	OFPIT_WRITE_ACTIONS = 3, \/* Write the action(s) onto the datapath action$/;"	e	enum:ofp_instruction_type
OFPIT_WRITE_METADATA	lib\libofp\ofp_v4.h	/^	OFPIT_WRITE_METADATA = 2, \/* Setup the metadata field for use later in$/;"	e	enum:ofp_instruction_type
OFPMPF_REQ_MORE	lib\libofp\ofp_v4.h	/^	OFPMPF_REQ_MORE = 1 << 0 \/* More requests to follow. *\/$/;"	e	enum:ofp_multipart_request_flags
OFPMP_AGGREGATE	lib\libofp\ofp_v4.h	/^	OFPMP_AGGREGATE = 2,$/;"	e	enum:ofp_multipart_type
OFPMP_DESC	lib\libofp\ofp_v4.h	/^	OFPMP_DESC = 0,$/;"	e	enum:ofp_multipart_type
OFPMP_EXPERIMENTER	lib\libofp\ofp_v4.h	/^	OFPMP_EXPERIMENTER = 0xffff$/;"	e	enum:ofp_multipart_type
OFPMP_FLOW	lib\libofp\ofp_v4.h	/^	OFPMP_FLOW = 1,$/;"	e	enum:ofp_multipart_type
OFPMP_GROUP	lib\libofp\ofp_v4.h	/^	OFPMP_GROUP = 6,$/;"	e	enum:ofp_multipart_type
OFPMP_GROUP_DESC	lib\libofp\ofp_v4.h	/^	OFPMP_GROUP_DESC = 7,$/;"	e	enum:ofp_multipart_type
OFPMP_GROUP_FEATURES	lib\libofp\ofp_v4.h	/^	OFPMP_GROUP_FEATURES = 8,$/;"	e	enum:ofp_multipart_type
OFPMP_METER	lib\libofp\ofp_v4.h	/^	OFPMP_METER = 9,$/;"	e	enum:ofp_multipart_type
OFPMP_METER_CONFIG	lib\libofp\ofp_v4.h	/^	OFPMP_METER_CONFIG = 10,$/;"	e	enum:ofp_multipart_type
OFPMP_METER_FEATURES	lib\libofp\ofp_v4.h	/^	OFPMP_METER_FEATURES = 11,$/;"	e	enum:ofp_multipart_type
OFPMP_PORT_DESC	lib\libofp\ofp_v4.h	/^	OFPMP_PORT_DESC = 13,$/;"	e	enum:ofp_multipart_type
OFPMP_PORT_STATS	lib\libofp\ofp_v4.h	/^	OFPMP_PORT_STATS = 4,$/;"	e	enum:ofp_multipart_type
OFPMP_QUEUE	lib\libofp\ofp_v4.h	/^	OFPMP_QUEUE = 5,$/;"	e	enum:ofp_multipart_type
OFPMP_REPLY_MORE_NO	lib\libofp\ofp_v4.h	/^	OFPMP_REPLY_MORE_NO = 0,$/;"	e	enum:__anon17
OFPMP_REPLY_MORE_YES	lib\libofp\ofp_v4.h	/^	OFPMP_REPLY_MORE_YES,$/;"	e	enum:__anon17
OFPMP_TABLE	lib\libofp\ofp_v4.h	/^	OFPMP_TABLE = 3,$/;"	e	enum:ofp_multipart_type
OFPMP_TABLE_FEATURES	lib\libofp\ofp_v4.h	/^	OFPMP_TABLE_FEATURES = 12,$/;"	e	enum:ofp_multipart_type
OFPMT_OXM	lib\libofp\ofp_v4.h	/^	OFPMT_OXM = 1, 				\/* OpenFlow Extensible Match *\/$/;"	e	enum:ofp_match_type
OFPMT_STANDARD	lib\libofp\ofp_v4.h	/^	OFPMT_STANDARD = 0, 		\/* Deprecated. *\/$/;"	e	enum:ofp_match_type
OFPPR_ADD	lib\libofp\ofp_v4.h	/^	OFPPR_ADD = 0, \/*端口添加。 *\/$/;"	e	enum:ofp_port_reason
OFPPR_DELETE	lib\libofp\ofp_v4.h	/^	OFPPR_DELETE = 1, \/*端口被删除*\/$/;"	e	enum:ofp_port_reason
OFPPR_MODIFY	lib\libofp\ofp_v4.h	/^	OFPPR_MODIFY = 2, \/*某些端口的属性已经改变了。*\/$/;"	e	enum:ofp_port_reason
OFPP_ALL	lib\libofp\ofp_v4.h	/^	OFPP_ALL = 0xfffffffc, \/* All physical ports except input port. *\/$/;"	e	enum:ofp_port_no
OFPP_ANY	lib\libofp\ofp_v4.h	/^	OFPP_ANY = 0xffffffff$/;"	e	enum:ofp_port_no
OFPP_CONTROLLER	lib\libofp\ofp_v4.h	/^	OFPP_CONTROLLER = 0xfffffffd, \/* Send to controller. *\/$/;"	e	enum:ofp_port_no
OFPP_FLOOD	lib\libofp\ofp_v4.h	/^	OFPP_FLOOD = 0xfffffffb, \/* All physical ports in VLAN, except input$/;"	e	enum:ofp_port_no
OFPP_IN_PORT	lib\libofp\ofp_v4.h	/^	OFPP_IN_PORT = 0xfffffff8, \/* Send the packet out the input port. This$/;"	e	enum:ofp_port_no
OFPP_LOCAL	lib\libofp\ofp_v4.h	/^	OFPP_LOCAL = 0xfffffffe, \/* Local openflow "port". *\/$/;"	e	enum:ofp_port_no
OFPP_MAX	lib\libofp\ofp_v4.h	/^	OFPP_MAX = 0xffffff00,$/;"	e	enum:ofp_port_no
OFPP_NORMAL	lib\libofp\ofp_v4.h	/^	OFPP_NORMAL = 0xfffffffa, \/* Process with normal L2\/L3 switching. *\/$/;"	e	enum:ofp_port_no
OFPP_TABLE	lib\libofp\ofp_v4.h	/^	OFPP_TABLE = 0xfffffff9, \/* Submit the packet to the first flow table$/;"	e	enum:ofp_port_no
OFPR_ACTION	lib\libofp\ofp_v4.h	/^	OFPR_ACTION = 1, \/* Action explicitly output to controller. *\/$/;"	e	enum:ofp_packet_in_reason
OFPR_INVALID_TTL	lib\libofp\ofp_v4.h	/^	OFPR_INVALID_TTL = 2, \/* Packet has invalid TTL *\/$/;"	e	enum:ofp_packet_in_reason
OFPR_NO_MATCH	lib\libofp\ofp_v4.h	/^	OFPR_NO_MATCH = 0, \/* No matching flow (table-miss flow entry). *\/$/;"	e	enum:ofp_packet_in_reason
OFPTFPT_APPLY_ACTIONS	lib\libofp\ofp_v4.h	/^	OFPTFPT_APPLY_ACTIONS = 6, \/* Apply Actions property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_APPLY_ACTIONS_MISS	lib\libofp\ofp_v4.h	/^	OFPTFPT_APPLY_ACTIONS_MISS = 7, \/* Apply Actions for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_APPLY_SETFIELD	lib\libofp\ofp_v4.h	/^	OFPTFPT_APPLY_SETFIELD = 14, \/* Apply Set-Field property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_APPLY_SETFIELD_MISS	lib\libofp\ofp_v4.h	/^	OFPTFPT_APPLY_SETFIELD_MISS = 15, \/* Apply Set-Field for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_EXPERIMENTER	lib\libofp\ofp_v4.h	/^	OFPTFPT_EXPERIMENTER = 0xFFFE, \/* Experimenter property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_EXPERIMENTER_MISS	lib\libofp\ofp_v4.h	/^	OFPTFPT_EXPERIMENTER_MISS = 0xFFFF, \/* Experimenter for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_INSTRUCTIONS	lib\libofp\ofp_v4.h	/^	OFPTFPT_INSTRUCTIONS = 0, 		\/* Instructions property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_INSTRUCTIONS_MISS	lib\libofp\ofp_v4.h	/^	OFPTFPT_INSTRUCTIONS_MISS = 1, \/* Instructions for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_MATCH	lib\libofp\ofp_v4.h	/^	OFPTFPT_MATCH = 8, \/* Match property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_NEXT_TABLES	lib\libofp\ofp_v4.h	/^	OFPTFPT_NEXT_TABLES = 2, \/* Next Table property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_NEXT_TABLES_MISS	lib\libofp\ofp_v4.h	/^	OFPTFPT_NEXT_TABLES_MISS = 3, \/* Next Table for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WILDCARDS	lib\libofp\ofp_v4.h	/^	OFPTFPT_WILDCARDS = 10, \/* Wildcards property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WRITE_ACTIONS	lib\libofp\ofp_v4.h	/^	OFPTFPT_WRITE_ACTIONS = 4, \/* Write Actions property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WRITE_ACTIONS_MISS	lib\libofp\ofp_v4.h	/^	OFPTFPT_WRITE_ACTIONS_MISS = 5, \/* Write Actions for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WRITE_SETFIELD	lib\libofp\ofp_v4.h	/^	OFPTFPT_WRITE_SETFIELD = 12, \/* Write Set-Field property. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPTFPT_WRITE_SETFIELD_MISS	lib\libofp\ofp_v4.h	/^	OFPTFPT_WRITE_SETFIELD_MISS = 13, \/* Write Set-Field for table-miss. *\/$/;"	e	enum:ofp_table_feature_prop_type
OFPT_BARRIER_REPLY	lib\libofp\ofp_v4.h	/^	OFPT_BARRIER_REPLY = 21, 		\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_BARRIER_REQUEST	lib\libofp\ofp_v4.h	/^	OFPT_BARRIER_REQUEST = 20, 		\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_ECHO_REPLY	lib\libofp\ofp_v4.h	/^	OFPT_ECHO_REPLY = 3, 			\/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_ECHO_REQUEST	lib\libofp\ofp_v4.h	/^	OFPT_ECHO_REQUEST = 2, 			\/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_ERROR	lib\libofp\ofp_v4.h	/^	OFPT_ERROR = 1, 				\/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_EXPERIMENTER	lib\libofp\ofp_v4.h	/^	OFPT_EXPERIMENTER = 4, 			\/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_FEATURES_REPLY	lib\libofp\ofp_v4.h	/^	OFPT_FEATURES_REPLY = 6, 		\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_FEATURES_REQUEST	lib\libofp\ofp_v4.h	/^	OFPT_FEATURES_REQUEST = 5, 		\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_FLOW_MOD	lib\libofp\ofp_v4.h	/^	OFPT_FLOW_MOD = 14, 			\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_FLOW_REMOVED	lib\libofp\ofp_v4.h	/^	OFPT_FLOW_REMOVED = 11, 		\/* Async message *\/$/;"	e	enum:ofp_type
OFPT_GET_ASYNC_REPLY	lib\libofp\ofp_v4.h	/^	OFPT_GET_ASYNC_REPLY = 27, 				\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_GET_ASYNC_REQUEST	lib\libofp\ofp_v4.h	/^	OFPT_GET_ASYNC_REQUEST = 26, 			\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_GET_CONFIG_REPLY	lib\libofp\ofp_v4.h	/^	OFPT_GET_CONFIG_REPLY = 8, 		\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_GET_CONFIG_REQUEST	lib\libofp\ofp_v4.h	/^	OFPT_GET_CONFIG_REQUEST = 7, 	\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_GROUP_MOD	lib\libofp\ofp_v4.h	/^	OFPT_GROUP_MOD = 15, 			\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_HELLO	lib\libofp\ofp_v4.h	/^	OFPT_HELLO = 0, 				\/* Symmetric message *\/$/;"	e	enum:ofp_type
OFPT_METER_MOD	lib\libofp\ofp_v4.h	/^	OFPT_METER_MOD = 29, 					\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_MULTIPART_REPLY	lib\libofp\ofp_v4.h	/^	OFPT_MULTIPART_REPLY = 19, 		\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_MULTIPART_REQUEST	lib\libofp\ofp_v4.h	/^	OFPT_MULTIPART_REQUEST = 18, 	\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_PACKET_IN	lib\libofp\ofp_v4.h	/^	OFPT_PACKET_IN = 10, 			\/* Async message *\/$/;"	e	enum:ofp_type
OFPT_PACKET_OUT	lib\libofp\ofp_v4.h	/^	OFPT_PACKET_OUT = 13, 			\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_PORT_MOD	lib\libofp\ofp_v4.h	/^	OFPT_PORT_MOD = 16, 			\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_PORT_STATUS	lib\libofp\ofp_v4.h	/^	OFPT_PORT_STATUS = 12, 			\/* Async message *\/$/;"	e	enum:ofp_type
OFPT_QUEUE_GET_CONFIG_REPLY	lib\libofp\ofp_v4.h	/^	OFPT_QUEUE_GET_CONFIG_REPLY = 23, 		\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_QUEUE_GET_CONFIG_REQUEST	lib\libofp\ofp_v4.h	/^	OFPT_QUEUE_GET_CONFIG_REQUEST = 22, 	\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_ROLE_REPLY	lib\libofp\ofp_v4.h	/^	OFPT_ROLE_REPLY = 25, 					\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_ROLE_REQUEST	lib\libofp\ofp_v4.h	/^	OFPT_ROLE_REQUEST = 24, 				\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_SET_ASYNC	lib\libofp\ofp_v4.h	/^	OFPT_SET_ASYNC = 28, 					\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_SET_CONFIG	lib\libofp\ofp_v4.h	/^	OFPT_SET_CONFIG = 9, 			\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPT_TABLE_MOD	lib\libofp\ofp_v4.h	/^	OFPT_TABLE_MOD = 17, 			\/* Controller\/switch message *\/$/;"	e	enum:ofp_type
OFPUTIL_PC_NO_FLOOD	lib\libofp\ofp_v4.h	/^    OFPUTIL_PC_NO_FLOOD     = 1 << 4, \/* Do not include port when flooding. *\/$/;"	e	enum:ofputil_port_config
OFPUTIL_PC_NO_FWD	lib\libofp\ofp_v4.h	/^    OFPUTIL_PC_NO_FWD       = 1 << 5, \/* Drop packets forwarded to port. *\/$/;"	e	enum:ofputil_port_config
OFPUTIL_PC_NO_PACKET_IN	lib\libofp\ofp_v4.h	/^    OFPUTIL_PC_NO_PACKET_IN = 1 << 6, \/* No send packet-in msgs for port. *\/$/;"	e	enum:ofputil_port_config
OFPUTIL_PC_NO_RECV	lib\libofp\ofp_v4.h	/^    OFPUTIL_PC_NO_RECV      = 1 << 2, \/* Drop all packets received by port. *\/$/;"	e	enum:ofputil_port_config
OFPUTIL_PC_NO_RECV_STP	lib\libofp\ofp_v4.h	/^    OFPUTIL_PC_NO_RECV_STP  = 1 << 3, \/* Drop received 802.1D STP packets. *\/$/;"	e	enum:ofputil_port_config
OFPUTIL_PC_NO_STP	lib\libofp\ofp_v4.h	/^    OFPUTIL_PC_NO_STP       = 1 << 1, \/* No 802.1D spanning tree for port. *\/$/;"	e	enum:ofputil_port_config
OFPUTIL_PC_PORT_DOWN	lib\libofp\ofp_v4.h	/^    OFPUTIL_PC_PORT_DOWN    = 1 << 0, \/* Port is administratively down. *\/$/;"	e	enum:ofputil_port_config
OFPUTIL_PS_BLOCKED	lib\libofp\ofp_v4.h	/^    OFPUTIL_PS_BLOCKED     = 1 << 1, \/* Port is blocked *\/$/;"	e	enum:ofputil_port_state
OFPUTIL_PS_LINK_DOWN	lib\libofp\ofp_v4.h	/^    OFPUTIL_PS_LINK_DOWN   = 1 << 0, \/* No physical link present. *\/$/;"	e	enum:ofputil_port_state
OFPUTIL_PS_LIVE	lib\libofp\ofp_v4.h	/^    OFPUTIL_PS_LIVE        = 1 << 2, \/* Live for Fast Failover Group. *\/$/;"	e	enum:ofputil_port_state
OFPUTIL_PS_STP_BLOCK	lib\libofp\ofp_v4.h	/^    OFPUTIL_PS_STP_BLOCK   = 3 << 8, \/* Not part of spanning tree. *\/$/;"	e	enum:ofputil_port_state
OFPUTIL_PS_STP_FORWARD	lib\libofp\ofp_v4.h	/^    OFPUTIL_PS_STP_FORWARD = 2 << 8, \/* Learning and relaying frames. *\/$/;"	e	enum:ofputil_port_state
OFPUTIL_PS_STP_LEARN	lib\libofp\ofp_v4.h	/^    OFPUTIL_PS_STP_LEARN   = 1 << 8, \/* Learning but not relaying frames. *\/$/;"	e	enum:ofputil_port_state
OFPUTIL_PS_STP_LISTEN	lib\libofp\ofp_v4.h	/^    OFPUTIL_PS_STP_LISTEN  = 0 << 8, \/* Not learning or relaying frames. *\/$/;"	e	enum:ofputil_port_state
OFPUTIL_PS_STP_MASK	lib\libofp\ofp_v4.h	/^    OFPUTIL_PS_STP_MASK    = 3 << 8  \/* Bit mask for OFPPS10_STP_* values. *\/$/;"	e	enum:ofputil_port_state
OFPXMC_EXPERIMENTER	lib\libofp\ofp_v4.h	/^	OFPXMC_EXPERIMENTER = 0xFFFF, \/* Experimenter class *\/$/;"	e	enum:ofp_oxm_class
OFPXMC_NXM_0	lib\libofp\ofp_v4.h	/^	OFPXMC_NXM_0 = 0x0000, \/* Backward compatibility with NXM *\/$/;"	e	enum:ofp_oxm_class
OFPXMC_NXM_1	lib\libofp\ofp_v4.h	/^	OFPXMC_NXM_1 = 0x0001, \/* Backward compatibility with NXM *\/$/;"	e	enum:ofp_oxm_class
OFPXMC_OPENFLOW_BASIC	lib\libofp\ofp_v4.h	/^	OFPXMC_OPENFLOW_BASIC = 0x8000, \/* Basic class for OpenFlow *\/$/;"	e	enum:ofp_oxm_class
OFPXMT_OFB_ARP_OP	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ARP_OP = 21, \/* ARP opcode. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ARP_SHA	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ARP_SHA = 24, \/* ARP source hardware address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ARP_SPA	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ARP_SPA = 22, \/* ARP source IPv4 address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ARP_THA	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ARP_THA = 25, \/* ARP target hardware address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ARP_TPA	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ARP_TPA = 23, \/* ARP target IPv4 address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ETH_DST	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ETH_DST = 3, \/* Ethernet destination address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ETH_SRC	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ETH_SRC = 4, \/* Ethernet source address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ETH_TYPE	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ETH_TYPE = 5, \/* Ethernet frame type. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ICMPV4_CODE	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ICMPV4_CODE = 20, \/* ICMP code. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ICMPV4_TYPE	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ICMPV4_TYPE = 19, \/* ICMP type. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ICMPV6_CODE	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ICMPV6_CODE = 30, \/* ICMPv6 code. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_ICMPV6_TYPE	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_ICMPV6_TYPE = 29, \/* ICMPv6 type. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IN_PHY_PORT	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IN_PHY_PORT = 1, \/* Switch physical input port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IN_PORT	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IN_PORT = 0, \/* Switch input port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV4_DST	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV4_DST = 12, \/* IPv4 destination address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV4_SRC	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV4_SRC = 11, \/* IPv4 source address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_DST	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV6_DST = 27, \/* IPv6 destination address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_EXTHDR	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV6_EXTHDR = 39, \/* IPv6 Extension Header pseudo-field *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_FLABEL	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV6_FLABEL = 28, \/* IPv6 Flow Label *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_ND_SLL	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV6_ND_SLL = 32, \/* Source link-layer for ND. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_ND_TARGET	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV6_ND_TARGET = 31, \/* Target address for ND. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_ND_TLL	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV6_ND_TLL = 33, \/* Target link-layer for ND. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IPV6_SRC	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IPV6_SRC = 26, \/* IPv6 source address. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IP_DSCP	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IP_DSCP = 8, \/* IP DSCP (6 bits in ToS field). *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IP_ECN	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IP_ECN = 9, \/* IP ECN (2 bits in ToS field). *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_IP_PROTO	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_IP_PROTO = 10, \/* IP protocol. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_METADATA	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_METADATA = 2, \/* Metadata passed between tables. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_MPLS_LABEL	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_MPLS_LABEL = 34, \/* MPLS label. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_MPLS_TC	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_MPLS_TC = 35, \/* MPLS TC. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_PBB_ISID	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_PBB_ISID = 37, \/* PBB I-SID. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_SCTP_DST	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_SCTP_DST = 18, \/* SCTP destination port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_SCTP_SRC	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_SCTP_SRC = 17, \/* SCTP source port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_TCP_DST	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_TCP_DST = 14, \/* TCP destination port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_TCP_SRC	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_TCP_SRC = 13, \/* TCP source port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_TUNNEL_ID	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_TUNNEL_ID = 38, \/* Logical Port Metadata. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_UDP_DST	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_UDP_DST = 16, \/* UDP destination port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_UDP_SRC	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_UDP_SRC = 15, \/* UDP source port. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_VLAN_PCP	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_VLAN_PCP = 7, \/* VLAN priority. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFB_VLAN_VID	lib\libofp\ofp_v4.h	/^	OFPXMT_OFB_VLAN_VID = 6, \/* VLAN id. *\/$/;"	e	enum:oxm_ofb_match_fields
OFPXMT_OFP_MPLS_BOS	lib\libofp\ofp_v4.h	/^	OFPXMT_OFP_MPLS_BOS = 36, \/* MPLS BoS bit. *\/$/;"	e	enum:oxm_ofb_match_fields
OFP_ASSERT	lib\libofp\ofp_v4.h	39;"	d
OFP_ASSERT	lib\libofp\ofp_v4.h	42;"	d
OFP_ASSERT	lib\libofp\ofp_v4.h	49;"	d
OFP_MAX_PORT_NAME_LEN	lib\libofp\ofp_v4.h	82;"	d
OFP_MAX_TABLE_NAME_LEN	lib\libofp\ofp_v4.h	81;"	d
SERIAL_NUM_LEN	lib\libofp\ofp_v4.h	820;"	d
__OFP_V4_H__	lib\libofp\ofp_v4.h	28;"	d
__be16	lib\libofp\ofp_v4.h	/^typedef uint16 __u16, __be16;$/;"	t
__be32	lib\libofp\ofp_v4.h	/^typedef uint32 __u32, __be32;$/;"	t
__be64	lib\libofp\ofp_v4.h	/^typedef uint64 __u64, __be64;$/;"	t
__u16	lib\libofp\ofp_v4.h	/^typedef uint16 __u16, __be16;$/;"	t
__u32	lib\libofp\ofp_v4.h	/^typedef uint32 __u32, __be32;$/;"	t
__u64	lib\libofp\ofp_v4.h	/^typedef uint64 __u64, __be64;$/;"	t
__u8	lib\libofp\ofp_v4.h	/^typedef uint8 __u8;$/;"	t
action_ids	lib\libofp\ofp_v4.h	/^		struct ofp_action action_ids[0]; \/* List of actions *\/$/;"	m	union:ofp_table_feature_prop_header::__anon19	typeref:struct:ofp_table_feature_prop_header::__anon19::ofp_action
action_output	lib\libofp\ofp_v4.h	/^	struct ofp_action_output action_output[0];$/;"	m	struct:ofp_instruction_flow_stats	typeref:struct:ofp_instruction_flow_stats::ofp_action_output
actions	lib\libofp\ofp_v4.h	/^	struct ofp_action_output actions[0];\/* Action list - 0 or more. XDL Modify*\/$/;"	m	struct:ofp_packet_out	typeref:struct:ofp_packet_out::ofp_action_output
actions	lib\libofp\ofp_v4.h	/^	uint32_t actions[4];	\/* Bitmaps of OFPAT_* that are supported. *\/$/;"	m	struct:ofp_group_features
actions_len	lib\libofp\ofp_v4.h	/^	uint16_t actions_len;$/;"	m	struct:ofp_packet_out
active_count	lib\libofp\ofp_v4.h	/^	uint32_t active_count;\/* Number of active entries. *\/$/;"	m	struct:ofp_table_stats
advertised	lib\libofp\ofp_v4.h	/^    uint32_t advertised; \/* Features advertised by the port. *\/$/;"	m	struct:ofp_port
auxiliary_id	lib\libofp\ofp_v4.h	/^	uint8_t auxiliary_id; 		 \/* Identify auxiliary connections *\/$/;"	m	struct:ofp_switch_features
be16	lib\libofp\ofp_v4.h	/^        ovs_be16 be16[3];$/;"	m	union:eth_addr::__anon18
bitmaps	lib\libofp\ofp_v4.h	/^uint32_t bitmaps[0]; \/* List of bitmaps - supported versions *\/$/;"	m	struct:ofp_hello_elem_versionbitmap
body	lib\libofp\ofp_v4.h	/^		uint8_t body[0]; 			\/* Body of the request. 0 or more bytes. *\/$/;"	m	union:ofp_multipart::__anon20
buffer_id	lib\libofp\ofp_v4.h	/^	uint32_t buffer_id; 			\/* Buffered packet to apply to, or$/;"	m	struct:ofp_flow_mod
buffer_id	lib\libofp\ofp_v4.h	/^	uint32_t buffer_id; 		\/* ID assigned by datapath. *\/$/;"	m	struct:ofp_packet_in
buffer_id	lib\libofp\ofp_v4.h	/^	uint32_t buffer_id;$/;"	m	struct:ofp_packet_out
byte_count	lib\libofp\ofp_v4.h	/^	uint64_t byte_count; 		\/* Number of bytes in flow. *\/$/;"	m	struct:ofp_flow_stats
byte_count	lib\libofp\ofp_v4.h	/^	uint64_t byte_count; 		\/* Number of bytes in flows. *\/$/;"	m	struct:ofp_aggregate_stats_reply
byte_count	lib\libofp\ofp_v4.h	/^	uint64_t byte_count;$/;"	m	struct:ofp_flow_removed
capabilities	lib\libofp\ofp_v4.h	/^	uint32_t capabilities;		 \/* Bitmap of support "ofp_capabilities". *\/$/;"	m	struct:ofp_switch_features
capabilities	lib\libofp\ofp_v4.h	/^	uint32_t capabilities;	\/* Bitmap of OFPGFC_* capability supported. *\/$/;"	m	struct:ofp_group_features
classname	lib\libofp\ofp_v4.h	/^	uint16_t classname;$/;"	m	struct:ofp_oxm
code	lib\libofp\ofp_v4.h	/^	uint16_t code;$/;"	m	struct:ofp_error_msg
collisions	lib\libofp\ofp_v4.h	/^	uint64_t collisions; 		\/* Number of collisions. *\/$/;"	m	struct:ofp_port_stats
command	lib\libofp\ofp_v4.h	/^	uint8_t command; 				\/* One of OFPFC_*. *\/$/;"	m	struct:ofp_flow_mod
config	lib\libofp\ofp_v4.h	/^	uint32_t config; 			\/* Bitmap of OFPTC_* values *\/$/;"	m	struct:ofp_table_features
config	lib\libofp\ofp_v4.h	/^    uint32_t config;$/;"	m	struct:ofp_port
cookie	lib\libofp\ofp_v4.h	/^	uint64_t cookie;				\/* Opaque controller-issued identifier. *\/$/;"	m	struct:ofp_flow_removed
cookie	lib\libofp\ofp_v4.h	/^	uint64_t cookie; 			\/* Cookie of the flow entry that was looked up. *\/$/;"	m	struct:ofp_packet_in
cookie	lib\libofp\ofp_v4.h	/^	uint64_t cookie; 			\/* Opaque controller-issued identifier. *\/$/;"	m	struct:ofp_flow_mod
cookie	lib\libofp\ofp_v4.h	/^	uint64_t cookie; 			\/* Opaque controller-issued identifier. *\/$/;"	m	struct:ofp_flow_stats
cookie	lib\libofp\ofp_v4.h	/^	uint64_t cookie; 			\/* Require matching entries to contain this$/;"	m	struct:ofp_flow_stats_request
cookie	lib\libofp\ofp_v4.h	/^	uint64_t cookie; 		\/* Require matching entries to contain this$/;"	m	struct:ofp_aggregate_stats_request
cookie_mask	lib\libofp\ofp_v4.h	/^	uint64_t cookie_mask; 		\/* Mask used to restrict the cookie bits that$/;"	m	struct:ofp_flow_stats_request
cookie_mask	lib\libofp\ofp_v4.h	/^	uint64_t cookie_mask; 		\/* Mask used to restrict the cookie bits$/;"	m	struct:ofp_flow_mod
cookie_mask	lib\libofp\ofp_v4.h	/^	uint64_t cookie_mask; 	\/* Mask used to restrict the cookie bits that$/;"	m	struct:ofp_aggregate_stats_request
curr	lib\libofp\ofp_v4.h	/^    uint32_t curr;       \/* Current features. *\/$/;"	m	struct:ofp_port
curr_speed	lib\libofp\ofp_v4.h	/^    uint32_t curr_speed;        \/* Current speed, in kbps. *\/$/;"	m	struct:ofp_port
data	lib\libofp\ofp_v4.h	/^	uint8_t data[0]; 			\/* Variable-length data. Interpreted based$/;"	m	struct:ofp_error_msg
datapath_id	lib\libofp\ofp_v4.h	/^	uint64_t datapath_id;		 \/* Datapath unique ID. The lower 48-bits are for$/;"	m	struct:ofp_switch_features
desc	lib\libofp\ofp_v4.h	/^	struct ofp_port desc;$/;"	m	struct:ofp_port_status	typeref:struct:ofp_port_status::ofp_port
dp_desc	lib\libofp\ofp_v4.h	/^    char dp_desc[DESC_STR_LEN];        \/* Human readable description of$/;"	m	struct:ofp_desc_stats
duration_nsec	lib\libofp\ofp_v4.h	/^	uint32_t duration_nsec; 		\/* Time flow was alive in nanoseconds beyond$/;"	m	struct:ofp_flow_removed
duration_nsec	lib\libofp\ofp_v4.h	/^	uint32_t duration_nsec; 	\/* Time flow has been alive in nanoseconds beyond$/;"	m	struct:ofp_flow_stats
duration_nsec	lib\libofp\ofp_v4.h	/^	uint32_t duration_nsec; 	\/* Time port has been alive in nanoseconds beyond$/;"	m	struct:ofp_port_stats
duration_sec	lib\libofp\ofp_v4.h	/^	uint32_t duration_sec; 			\/* Time flow was alive in seconds. *\/$/;"	m	struct:ofp_flow_removed
duration_sec	lib\libofp\ofp_v4.h	/^	uint32_t duration_sec; 		\/* Time flow has been alive in seconds. *\/$/;"	m	struct:ofp_flow_stats
duration_sec	lib\libofp\ofp_v4.h	/^	uint32_t duration_sec; 		\/* Time port has been alive in seconds. *\/$/;"	m	struct:ofp_port_stats
ea	lib\libofp\ofp_v4.h	/^        uint8_t ea[6];$/;"	m	union:eth_addr::__anon18
eth_addr	lib\libofp\ofp_v4.h	/^struct eth_addr {$/;"	s
eth_packet_type	lib\libofp\ofp_v4.h	/^enum eth_packet_type {$/;"	g
filed	lib\libofp\ofp_v4.h	/^		filed:7;$/;"	m	struct:ofp_oxm
flags	lib\libofp\ofp_v4.h	/^	uint16_t flags;					\/* Bitmap of OFPFF_* flags. *\/$/;"	m	struct:ofp_flow_mod
flags	lib\libofp\ofp_v4.h	/^	uint16_t flags; 				\/* Bitmap of OFPC_* flags. *\/$/;"	m	struct:ofp_switch_config
flags	lib\libofp\ofp_v4.h	/^	uint16_t flags; 				\/* OFPMPF_REQ_* flags. *\/$/;"	m	struct:ofp_multipart
flags	lib\libofp\ofp_v4.h	/^	uint16_t flags; 			\/* Bitmap of OFPFF_* flags. *\/$/;"	m	struct:ofp_flow_stats
flow_count	lib\libofp\ofp_v4.h	/^	uint32_t flow_count; 		\/* Number of flows. *\/$/;"	m	struct:ofp_aggregate_stats_reply
generation_id	lib\libofp\ofp_v4.h	/^	uint64_t generation_id; \/* Master Election Generation Id *\/$/;"	m	struct:ofp_role
hard_timeout	lib\libofp\ofp_v4.h	/^	uint16_t hard_timeout;			\/* Max time before discarding (seconds). *\/$/;"	m	struct:ofp_flow_mod
hard_timeout	lib\libofp\ofp_v4.h	/^	uint16_t hard_timeout; 			\/* Hard timeout from original flow mod. *\/$/;"	m	struct:ofp_flow_removed
hard_timeout	lib\libofp\ofp_v4.h	/^	uint16_t hard_timeout; 		\/* Number of seconds before expiration. *\/$/;"	m	struct:ofp_flow_stats
has_mask	lib\libofp\ofp_v4.h	/^	uint8_t has_mask:1,$/;"	m	struct:ofp_oxm
header	lib\libofp\ofp_v4.h	/^	struct ofp_header header;$/;"	m	struct:ofp_packet_out	typeref:struct:ofp_packet_out::ofp_header
hw_addr	lib\libofp\ofp_v4.h	/^	uint8_t hw_addr[ETH_ALEN];$/;"	m	struct:ofp_port
hw_desc	lib\libofp\ofp_v4.h	/^    char hw_desc[DESC_STR_LEN];        \/* Hardware description. *\/$/;"	m	struct:ofp_desc_stats
idle_timeout	lib\libofp\ofp_v4.h	/^	uint16_t idle_timeout;			\/* Idle time before discarding (seconds). *\/$/;"	m	struct:ofp_flow_mod
idle_timeout	lib\libofp\ofp_v4.h	/^	uint16_t idle_timeout; 			\/* Idle timeout from original flow mod. *\/$/;"	m	struct:ofp_flow_removed
idle_timeout	lib\libofp\ofp_v4.h	/^	uint16_t idle_timeout; 		\/* Number of seconds idle before expiration. *\/$/;"	m	struct:ofp_flow_stats
in_port	lib\libofp\ofp_v4.h	/^	uint32_t in_port;$/;"	m	struct:ofp_packet_out
instruction_ids	lib\libofp\ofp_v4.h	/^		struct ofp_instruction instruction_ids[0]; \/* List of instructions *\/$/;"	m	union:ofp_table_feature_prop_header::__anon19	typeref:struct:ofp_table_feature_prop_header::__anon19::ofp_instruction
instructions	lib\libofp\ofp_v4.h	/^	struct ofp_instruction instructions[0];		 \/* Instruction set - 0 or more.$/;"	m	struct:ofp_flow_mod	typeref:struct:ofp_flow_mod::ofp_instruction
instructions	lib\libofp\ofp_v4.h	/^	struct ofp_instruction_flow_stats instructions[0]; \/* Instruction set - 0 or more. *\/$/;"	m	struct:ofp_flow_stats	typeref:struct:ofp_flow_stats::ofp_instruction_flow_stats
int64	lib\libofp\ofp_v4.h	/^typedef long long int64;$/;"	t
len	lib\libofp\ofp_v4.h	/^	uint16_t len; \/* Length is 16. *\/$/;"	m	struct:ofp_action_output
len	lib\libofp\ofp_v4.h	/^	uint16_t len; \/* Length of this struct in bytes. *\/	$/;"	m	struct:ofp_instruction
len	lib\libofp\ofp_v4.h	/^	uint16_t len; \/* Length of this struct in bytes. *\/$/;"	m	struct:ofp_instruction_flow_stats
length	lib\libofp\ofp_v4.h	/^	uint16_t length; 			\/* Length is padded to 64 bits. *\/$/;"	m	struct:ofp_table_features
length	lib\libofp\ofp_v4.h	/^	uint16_t length; 			\/* Length of ofp_match (excluding padding) *\/$/;"	m	struct:ofp_match
length	lib\libofp\ofp_v4.h	/^	uint16_t length; 			\/* Length of ofp_match (excluding padding) *\/$/;"	m	struct:ofp_packet_in_match
length	lib\libofp\ofp_v4.h	/^	uint16_t length; 			\/* Length of this entry. *\/$/;"	m	struct:ofp_flow_stats
length	lib\libofp\ofp_v4.h	/^	uint16_t length; 		\/* Length including this ofp_header. *\/$/;"	m	struct:ofp_header
length	lib\libofp\ofp_v4.h	/^	uint16_t length; \/* Length in bytes of this property. *\/$/;"	m	struct:ofp_table_feature_prop_header
length	lib\libofp\ofp_v4.h	/^	uint16_t length;$/;"	m	struct:ofp_action
length	lib\libofp\ofp_v4.h	/^	uint8_t length;$/;"	m	struct:ofp_oxm
length	lib\libofp\ofp_v4.h	/^    ovs_be16    length;      \/* Length in bytes of this element. *\/$/;"	m	struct:ofp_hello_elem_header
length	lib\libofp\ofp_v4.h	/^uint16_t length; \/* Length in bytes of this element. *\/$/;"	m	struct:ofp_hello_elem_versionbitmap
lookup_count	lib\libofp\ofp_v4.h	/^	uint64_t lookup_count;\/* Number of packets looked up in table. *\/$/;"	m	struct:ofp_table_stats
match	lib\libofp\ofp_v4.h	/^	struct ofp_match match; 		\/* Description of fields. Variable size. *\/$/;"	m	struct:ofp_flow_removed	typeref:struct:ofp_flow_removed::ofp_match
match	lib\libofp\ofp_v4.h	/^	struct ofp_match match; 		\/* Fields to match. Variable size. *\/$/;"	m	struct:ofp_flow_mod	typeref:struct:ofp_flow_mod::ofp_match
match	lib\libofp\ofp_v4.h	/^	struct ofp_match match; 	\/* Description of fields. Variable size. *\/$/;"	m	struct:ofp_flow_stats	typeref:struct:ofp_flow_stats::ofp_match
match	lib\libofp\ofp_v4.h	/^	struct ofp_match match; 	\/* Fields to match. Variable size. *\/$/;"	m	struct:ofp_flow_stats_request	typeref:struct:ofp_flow_stats_request::ofp_match
match	lib\libofp\ofp_v4.h	/^	struct ofp_match match; \/* Fields to match. Variable size. *\/$/;"	m	struct:ofp_aggregate_stats_request	typeref:struct:ofp_aggregate_stats_request::ofp_match
match	lib\libofp\ofp_v4.h	/^	struct ofp_packet_in_match match; 	\/* Packet metadata. Variable size. *\/$/;"	m	struct:ofp_packet_in	typeref:struct:ofp_packet_in::ofp_packet_in_match
matched_count	lib\libofp\ofp_v4.h	/^	uint64_t matched_count;\/* Number of packets that hit table. *\/$/;"	m	struct:ofp_table_stats
max_entries	lib\libofp\ofp_v4.h	/^	uint32_t max_entries; 		\/* Max number of entries supported. *\/$/;"	m	struct:ofp_table_features
max_groups	lib\libofp\ofp_v4.h	/^	uint32_t max_groups[4];	\/* Maximum number of groups for each type. *\/$/;"	m	struct:ofp_group_features
max_len	lib\libofp\ofp_v4.h	/^	uint16_t max_len; \/* Max length to send to controller. *\/$/;"	m	struct:ofp_action_output
max_speed	lib\libofp\ofp_v4.h	/^    uint32_t max_speed;         \/* Maximum supported speed, in kbps. *\/$/;"	m	struct:ofp_port
metadata_match	lib\libofp\ofp_v4.h	/^	uint64_t metadata_match; 	\/* Bits of metadata table can match. *\/$/;"	m	struct:ofp_table_features
metadata_write	lib\libofp\ofp_v4.h	/^	uint64_t metadata_write; 	\/* Bits of metadata table can write. *\/$/;"	m	struct:ofp_table_features
mfr_desc	lib\libofp\ofp_v4.h	/^    char mfr_desc[DESC_STR_LEN];       \/* Manufacturer description. *\/$/;"	m	struct:ofp_desc_stats
miss_send_len	lib\libofp\ofp_v4.h	/^	uint16_t miss_send_len; 		\/* Max bytes of packet that datapath$/;"	m	struct:ofp_switch_config
n_buffers	lib\libofp\ofp_v4.h	/^	uint32_t n_buffers; 		 \/* Max packets buffered at once. *\/$/;"	m	struct:ofp_switch_features
n_tables	lib\libofp\ofp_v4.h	/^	uint8_t n_tables; 			 \/* Number of tables supported by datapath. *\/$/;"	m	struct:ofp_switch_features
name	lib\libofp\ofp_v4.h	/^	char name[OFP_MAX_TABLE_NAME_LEN];$/;"	m	struct:ofp_table_features
name	lib\libofp\ofp_v4.h	/^    char name[OFP_MAX_PORT_NAME_LEN];$/;"	m	struct:ofp_port
netdev_features	lib\libofp\ofp_v4.h	/^enum netdev_features {$/;"	g
next_table_id	lib\libofp\ofp_v4.h	/^	uint8_t next_table_id;$/;"	m	struct:ofp_next_table
next_table_ids	lib\libofp\ofp_v4.h	/^		struct ofp_next_table next_table_ids[0]; \/* List of table ids. *\/$/;"	m	union:ofp_table_feature_prop_header::__anon19	typeref:struct:ofp_table_feature_prop_header::__anon19::ofp_next_table
ofp_action	lib\libofp\ofp_v4.h	/^struct ofp_action{$/;"	s
ofp_action_output	lib\libofp\ofp_v4.h	/^struct ofp_action_output {$/;"	s
ofp_action_type	lib\libofp\ofp_v4.h	/^enum ofp_action_type {$/;"	g
ofp_aggregate_stats_reply	lib\libofp\ofp_v4.h	/^struct ofp_aggregate_stats_reply {$/;"	s
ofp_aggregate_stats_request	lib\libofp\ofp_v4.h	/^struct ofp_aggregate_stats_request {$/;"	s
ofp_bad_request_code	lib\libofp\ofp_v4.h	/^enum ofp_bad_request_code {$/;"	g
ofp_controller_role	lib\libofp\ofp_v4.h	/^enum ofp_controller_role {$/;"	g
ofp_desc_stats	lib\libofp\ofp_v4.h	/^struct ofp_desc_stats {$/;"	s
ofp_error_msg	lib\libofp\ofp_v4.h	/^struct ofp_error_msg {$/;"	s
ofp_error_type	lib\libofp\ofp_v4.h	/^enum ofp_error_type {$/;"	g
ofp_flow_mod	lib\libofp\ofp_v4.h	/^struct ofp_flow_mod {$/;"	s
ofp_flow_mod_command	lib\libofp\ofp_v4.h	/^enum ofp_flow_mod_command$/;"	g
ofp_flow_removed	lib\libofp\ofp_v4.h	/^struct ofp_flow_removed {$/;"	s
ofp_flow_stats	lib\libofp\ofp_v4.h	/^		struct ofp_flow_stats ofp_flow_stats[0];$/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_flow_stats
ofp_flow_stats	lib\libofp\ofp_v4.h	/^struct ofp_flow_stats {$/;"	s
ofp_flow_stats_request	lib\libofp\ofp_v4.h	/^		struct ofp_flow_stats_request ofp_flow_stats_request[0];$/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_flow_stats_request
ofp_flow_stats_request	lib\libofp\ofp_v4.h	/^struct ofp_flow_stats_request {$/;"	s
ofp_group_features	lib\libofp\ofp_v4.h	/^struct ofp_group_features {$/;"	s
ofp_header	lib\libofp\ofp_v4.h	/^struct ofp_header{$/;"	s
ofp_hello	lib\libofp\ofp_v4.h	/^struct ofp_hello {$/;"	s
ofp_hello_elem_header	lib\libofp\ofp_v4.h	/^struct ofp_hello_elem_header {$/;"	s
ofp_hello_elem_versionbitmap	lib\libofp\ofp_v4.h	/^struct ofp_hello_elem_versionbitmap {$/;"	s
ofp_instruction	lib\libofp\ofp_v4.h	/^struct ofp_instruction {$/;"	s
ofp_instruction_flow_stats	lib\libofp\ofp_v4.h	/^struct ofp_instruction_flow_stats {$/;"	s
ofp_instruction_type	lib\libofp\ofp_v4.h	/^enum ofp_instruction_type {$/;"	g
ofp_match	lib\libofp\ofp_v4.h	/^struct ofp_match {$/;"	s
ofp_match_type	lib\libofp\ofp_v4.h	/^enum ofp_match_type {$/;"	g
ofp_multipart	lib\libofp\ofp_v4.h	/^struct ofp_multipart {$/;"	s
ofp_multipart_request_flags	lib\libofp\ofp_v4.h	/^enum ofp_multipart_request_flags {$/;"	g
ofp_multipart_type	lib\libofp\ofp_v4.h	/^enum ofp_multipart_type {$/;"	g
ofp_next_table	lib\libofp\ofp_v4.h	/^struct ofp_next_table{$/;"	s
ofp_oxm	lib\libofp\ofp_v4.h	/^struct ofp_oxm{$/;"	s
ofp_oxm_class	lib\libofp\ofp_v4.h	/^enum ofp_oxm_class {$/;"	g
ofp_packet_in	lib\libofp\ofp_v4.h	/^struct ofp_packet_in {$/;"	s
ofp_packet_in_match	lib\libofp\ofp_v4.h	/^struct ofp_packet_in_match {$/;"	s
ofp_packet_in_reason	lib\libofp\ofp_v4.h	/^enum ofp_packet_in_reason {$/;"	g
ofp_packet_out	lib\libofp\ofp_v4.h	/^struct ofp_packet_out {$/;"	s
ofp_port	lib\libofp\ofp_v4.h	/^struct ofp_port {$/;"	s
ofp_port_no	lib\libofp\ofp_v4.h	/^enum ofp_port_no {$/;"	g
ofp_port_reason	lib\libofp\ofp_v4.h	/^enum ofp_port_reason {$/;"	g
ofp_port_stats	lib\libofp\ofp_v4.h	/^struct ofp_port_stats {$/;"	s
ofp_port_status	lib\libofp\ofp_v4.h	/^struct ofp_port_status {	$/;"	s
ofp_role	lib\libofp\ofp_v4.h	/^struct ofp_role {$/;"	s
ofp_switch_config	lib\libofp\ofp_v4.h	/^struct ofp_switch_config {$/;"	s
ofp_switch_features	lib\libofp\ofp_v4.h	/^struct ofp_switch_features {$/;"	s
ofp_table_feature_prop_header	lib\libofp\ofp_v4.h	/^struct ofp_table_feature_prop_header {$/;"	s
ofp_table_feature_prop_type	lib\libofp\ofp_v4.h	/^enum ofp_table_feature_prop_type {$/;"	g
ofp_table_features	lib\libofp\ofp_v4.h	/^struct ofp_table_features {$/;"	s
ofp_table_stats	lib\libofp\ofp_v4.h	/^struct ofp_table_stats {$/;"	s
ofp_type	lib\libofp\ofp_v4.h	/^enum ofp_type {$/;"	g
ofp_version	lib\libofp\ofp_v4.h	/^enum ofp_version {$/;"	g
ofperr	lib\libofp\ofp_v4.h	/^enum ofperr {$/;"	g
ofpmp_aggregate_reply	lib\libofp\ofp_v4.h	/^		struct ofp_aggregate_stats_reply ofpmp_aggregate_reply[0];$/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_aggregate_stats_reply
ofpmp_aggregate_request	lib\libofp\ofp_v4.h	/^		struct ofp_aggregate_stats_request ofpmp_aggregate_request[0]; $/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_aggregate_stats_request
ofpmp_desc	lib\libofp\ofp_v4.h	/^		struct ofp_desc_stats ofpmp_desc[0];$/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_desc_stats
ofpmp_port_desc	lib\libofp\ofp_v4.h	/^		struct ofp_port ofpmp_port_desc[0];$/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_port
ofpmp_port_stats	lib\libofp\ofp_v4.h	/^		struct ofp_port_stats ofpmp_port_stats[0];$/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_port_stats
ofpmp_table_features	lib\libofp\ofp_v4.h	/^		struct ofp_table_features ofpmp_table_features[0];$/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_table_features
ofputil_port_config	lib\libofp\ofp_v4.h	/^enum ofputil_port_config {$/;"	g
ofputil_port_state	lib\libofp\ofp_v4.h	/^enum ofputil_port_state {$/;"	g
out_group	lib\libofp\ofp_v4.h	/^	uint32_t out_group; 			\/* For OFPFC_DELETE* commands, require$/;"	m	struct:ofp_flow_mod
out_group	lib\libofp\ofp_v4.h	/^	uint32_t out_group; 		\/* Require matching entries to include this$/;"	m	struct:ofp_flow_stats_request
out_group	lib\libofp\ofp_v4.h	/^	uint32_t out_group; 	\/* Require matching entries to include this$/;"	m	struct:ofp_aggregate_stats_request
out_port	lib\libofp\ofp_v4.h	/^	uint32_t out_port; 				\/* For OFPFC_DELETE* commands, require$/;"	m	struct:ofp_flow_mod
out_port	lib\libofp\ofp_v4.h	/^	uint32_t out_port; 			\/* Require matching entries to include this$/;"	m	struct:ofp_flow_stats_request
out_port	lib\libofp\ofp_v4.h	/^	uint32_t out_port; 		\/* Require matching entries to include this$/;"	m	struct:ofp_aggregate_stats_request
ovs_be16	lib\libofp\ofp_v4.h	/^typedef unsigned short uint16, uint16_t, ovs_be16;$/;"	t
ovs_be32	lib\libofp\ofp_v4.h	/^typedef unsigned int uint32, uint32_t, ovs_be32;$/;"	t
ovs_be64	lib\libofp\ofp_v4.h	/^typedef unsigned long long uint64,ovs_be64;$/;"	t
oxm_idl	lib\libofp\ofp_v4.h	/^	struct ofp_oxm oxm_idl[0] ; 		\/* 0 or more OXM match fields *\/$/;"	m	struct:ofp_match	typeref:struct:ofp_match::ofp_oxm
oxm_idl	lib\libofp\ofp_v4.h	/^	struct ofp_oxm oxm_idl[0] ; 		\/* 0 or more OXM match fields *\/$/;"	m	struct:ofp_packet_in_match	typeref:struct:ofp_packet_in_match::ofp_oxm
oxm_ids	lib\libofp\ofp_v4.h	/^		struct ofp_oxm oxm_ids[0]; \/* Array of OXM headers *\/$/;"	m	union:ofp_table_feature_prop_header::__anon19	typeref:struct:ofp_table_feature_prop_header::__anon19::ofp_oxm
oxm_ofb_match_fields	lib\libofp\ofp_v4.h	/^enum oxm_ofb_match_fields {$/;"	g
packet_count	lib\libofp\ofp_v4.h	/^	uint64_t packet_count; 		\/* Number of packets in flow. *\/$/;"	m	struct:ofp_flow_stats
packet_count	lib\libofp\ofp_v4.h	/^	uint64_t packet_count; 		\/* Number of packets in flows. *\/$/;"	m	struct:ofp_aggregate_stats_reply
packet_count	lib\libofp\ofp_v4.h	/^	uint64_t packet_count;$/;"	m	struct:ofp_flow_removed
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad;$/;"	m	struct:ofp_flow_stats
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[2]; 			 \/* Align to 64-bits. *\/$/;"	m	struct:ofp_switch_features
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[2];$/;"	m	struct:ofp_flow_mod
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[3]; 			\/* Align to 32 bits. *\/$/;"	m	struct:ofp_flow_stats_request
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[3]; 		\/* Align to 32 bits. *\/$/;"	m	struct:ofp_aggregate_stats_request
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[3];$/;"	m	struct:ofp_next_table
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[3];\/* Align to 32-bits. *\/$/;"	m	struct:ofp_table_stats
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[4]; 			\/* Align to 64 bits. *\/$/;"	m	struct:ofp_aggregate_stats_reply
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[4]; 			\/* Align to 64-bits. *\/$/;"	m	struct:ofp_port_stats
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[4]; 			\/* Zero bytes - see above for sizing *\/$/;"	m	struct:ofp_match
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[4]; \/* Align to 64 bits. *\/$/;"	m	struct:ofp_role
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_instruction_flow_stats
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_multipart
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[4];$/;"	m	struct:ofp_port
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[5]; 			\/* Align to 64-bits. *\/$/;"	m	struct:ofp_table_features
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[6]; \/* Pad to 64 bits. *\/$/;"	m	struct:ofp_action_output
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[6];$/;"	m	struct:ofp_packet_out
pad	lib\libofp\ofp_v4.h	/^	uint8_t pad[7];$/;"	m	struct:ofp_port_status
pad2	lib\libofp\ofp_v4.h	/^	uint8_t pad2[2]; \/* Align to 64 bits. *\/$/;"	m	struct:ofp_port
pad2	lib\libofp\ofp_v4.h	/^	uint8_t pad2[4]; 			\/* Align to 64 bits. *\/$/;"	m	struct:ofp_flow_stats_request
pad2	lib\libofp\ofp_v4.h	/^	uint8_t pad2[4]; 			\/* Align to 64-bits. *\/$/;"	m	struct:ofp_flow_stats
pad2	lib\libofp\ofp_v4.h	/^	uint8_t pad2[4]; 		\/* Align to 64 bits. *\/$/;"	m	struct:ofp_aggregate_stats_request
peer	lib\libofp\ofp_v4.h	/^    uint32_t peer;       \/* Features advertised by peer. *\/$/;"	m	struct:ofp_port
port	lib\libofp\ofp_v4.h	/^	uint32_t port; \/* Output port. *\/$/;"	m	struct:ofp_action_output
port_no	lib\libofp\ofp_v4.h	/^	uint32_t port_no;$/;"	m	struct:ofp_port_stats
port_no	lib\libofp\ofp_v4.h	/^    uint32_t port_no;$/;"	m	struct:ofp_port
priority	lib\libofp\ofp_v4.h	/^	uint16_t priority; 				\/* Priority level of flow entry. *\/$/;"	m	struct:ofp_flow_mod
priority	lib\libofp\ofp_v4.h	/^	uint16_t priority; 				\/* Priority level of flow entry. *\/$/;"	m	struct:ofp_flow_removed
priority	lib\libofp\ofp_v4.h	/^	uint16_t priority; 			\/* Priority of the entry. *\/$/;"	m	struct:ofp_flow_stats
properties	lib\libofp\ofp_v4.h	/^	struct ofp_table_feature_prop_header properties[0]; \/* List of properties *\/$/;"	m	struct:ofp_table_features	typeref:struct:ofp_table_features::ofp_table_feature_prop_header
reason	lib\libofp\ofp_v4.h	/^	uint8_t reason; 				\/* One of OFPRR_*. *\/$/;"	m	struct:ofp_flow_removed
reason	lib\libofp\ofp_v4.h	/^	uint8_t reason; 			\/* Reason packet is being sent (one of OFPR_*) *\/$/;"	m	struct:ofp_packet_in
reason	lib\libofp\ofp_v4.h	/^	uint8_t reason;$/;"	m	struct:ofp_port_status
reserved	lib\libofp\ofp_v4.h	/^	uint32_t reserved;$/;"	m	struct:ofp_switch_features
role	lib\libofp\ofp_v4.h	/^	uint32_t role; \/* One of OFPCR_ROLE_*. *\/$/;"	m	struct:ofp_role
rx_bytes	lib\libofp\ofp_v4.h	/^	uint64_t rx_bytes; 			\/* Number of received bytes. *\/$/;"	m	struct:ofp_port_stats
rx_crc_err	lib\libofp\ofp_v4.h	/^	uint64_t rx_crc_err; 		\/* Number of CRC errors. *\/$/;"	m	struct:ofp_port_stats
rx_dropped	lib\libofp\ofp_v4.h	/^	uint64_t rx_dropped; 		\/* Number of packets dropped by RX. *\/$/;"	m	struct:ofp_port_stats
rx_errors	lib\libofp\ofp_v4.h	/^	uint64_t rx_errors; 		\/* Number of receive errors. This is a super-set$/;"	m	struct:ofp_port_stats
rx_frame_err	lib\libofp\ofp_v4.h	/^	uint64_t rx_frame_err; 		\/* Number of frame alignment errors. *\/$/;"	m	struct:ofp_port_stats
rx_over_err	lib\libofp\ofp_v4.h	/^	uint64_t rx_over_err; 		\/* Number of packets with RX overrun. *\/$/;"	m	struct:ofp_port_stats
rx_packets	lib\libofp\ofp_v4.h	/^	uint64_t rx_packets; 		\/* Number of received packets. *\/$/;"	m	struct:ofp_port_stats
serial_num	lib\libofp\ofp_v4.h	/^    char serial_num[SERIAL_NUM_LEN];   \/* Serial number. *\/$/;"	m	struct:ofp_desc_stats
state	lib\libofp\ofp_v4.h	/^    uint32_t state;$/;"	m	struct:ofp_port
supported	lib\libofp\ofp_v4.h	/^    uint32_t supported;  \/* Features supported by the port. *\/$/;"	m	struct:ofp_port
sw_desc	lib\libofp\ofp_v4.h	/^    char sw_desc[DESC_STR_LEN];        \/* Software description. *\/$/;"	m	struct:ofp_desc_stats
table_id	lib\libofp\ofp_v4.h	/^	uint8_t table_id;	 			\/* ID of the table to put the flow in.$/;"	m	struct:ofp_flow_mod
table_id	lib\libofp\ofp_v4.h	/^	uint8_t table_id; 				\/* ID of the table *\/$/;"	m	struct:ofp_flow_removed
table_id	lib\libofp\ofp_v4.h	/^	uint8_t table_id; 			\/* ID of table flow came from. *\/$/;"	m	struct:ofp_flow_stats
table_id	lib\libofp\ofp_v4.h	/^	uint8_t table_id; 			\/* ID of table to read (from ofp_table_stats),$/;"	m	struct:ofp_flow_stats_request
table_id	lib\libofp\ofp_v4.h	/^	uint8_t table_id; 			\/* ID of the table that was looked up *\/$/;"	m	struct:ofp_packet_in
table_id	lib\libofp\ofp_v4.h	/^	uint8_t table_id; 			\/* Identifier of table. Lower numbered tables$/;"	m	struct:ofp_table_features
table_id	lib\libofp\ofp_v4.h	/^	uint8_t table_id; 		\/* ID of table to read (from ofp_table_stats)$/;"	m	struct:ofp_aggregate_stats_request
table_id	lib\libofp\ofp_v4.h	/^	uint8_t table_id;$/;"	m	struct:ofp_table_stats
table_stats	lib\libofp\ofp_v4.h	/^		struct ofp_table_stats table_stats[0];$/;"	m	union:ofp_multipart::__anon20	typeref:struct:ofp_multipart::__anon20::ofp_table_stats
total_len	lib\libofp\ofp_v4.h	/^	uint16_t total_len; 		\/* Full length of frame. *\/$/;"	m	struct:ofp_packet_in
tx_bytes	lib\libofp\ofp_v4.h	/^	uint64_t tx_bytes; 			\/* Number of transmitted bytes. *\/$/;"	m	struct:ofp_port_stats
tx_dropped	lib\libofp\ofp_v4.h	/^	uint64_t tx_dropped; 		\/* Number of packets dropped by TX. *\/$/;"	m	struct:ofp_port_stats
tx_errors	lib\libofp\ofp_v4.h	/^	uint64_t tx_errors; 		\/* Number of transmit errors. This is a super-set$/;"	m	struct:ofp_port_stats
tx_packets	lib\libofp\ofp_v4.h	/^	uint64_t tx_packets; 		\/* Number of transmitted packets. *\/$/;"	m	struct:ofp_port_stats
type	lib\libofp\ofp_v4.h	/^	uint16_t type; 					\/* One of the OFPMP_* constants. *\/$/;"	m	struct:ofp_multipart
type	lib\libofp\ofp_v4.h	/^	uint16_t type; 				\/* One of OFPMT_* *\/$/;"	m	struct:ofp_match
type	lib\libofp\ofp_v4.h	/^	uint16_t type; 				\/* One of OFPMT_* *\/$/;"	m	struct:ofp_packet_in_match
type	lib\libofp\ofp_v4.h	/^	uint16_t type; \/* Instruction type *\/$/;"	m	struct:ofp_instruction
type	lib\libofp\ofp_v4.h	/^	uint16_t type; \/* Instruction type *\/$/;"	m	struct:ofp_instruction_flow_stats
type	lib\libofp\ofp_v4.h	/^	uint16_t type; \/* OFPAT_OUTPUT. *\/$/;"	m	struct:ofp_action_output
type	lib\libofp\ofp_v4.h	/^	uint16_t type; \/* One of OFPTFPT_*. *\/$/;"	m	struct:ofp_table_feature_prop_header
type	lib\libofp\ofp_v4.h	/^	uint16_t type;$/;"	m	struct:ofp_action
type	lib\libofp\ofp_v4.h	/^	uint16_t type;$/;"	m	struct:ofp_error_msg
type	lib\libofp\ofp_v4.h	/^	uint8_t type; 			\/* One of the OFPT_ constants. *\/$/;"	m	struct:ofp_header
type	lib\libofp\ofp_v4.h	/^    ovs_be16    type;        \/* One of OFPHET_*. *\/$/;"	m	struct:ofp_hello_elem_header
type	lib\libofp\ofp_v4.h	/^uint16_t type; \/* OFPHET_VERSIONBITMAP. *\/$/;"	m	struct:ofp_hello_elem_versionbitmap
types	lib\libofp\ofp_v4.h	/^	uint32_t types;			\/* Bitmap of OFPGT_* values supported. *\/$/;"	m	struct:ofp_group_features
uint16	lib\libofp\ofp_v4.h	/^typedef unsigned short uint16, uint16_t, ovs_be16;$/;"	t
uint16_t	lib\libofp\ofp_v4.h	/^typedef unsigned short uint16, uint16_t, ovs_be16;$/;"	t
uint32	lib\libofp\ofp_v4.h	/^typedef unsigned int uint32, uint32_t, ovs_be32;$/;"	t
uint32_t	lib\libofp\ofp_v4.h	/^typedef unsigned int uint32, uint32_t, ovs_be32;$/;"	t
uint64	lib\libofp\ofp_v4.h	/^typedef unsigned long long uint64,ovs_be64;$/;"	t
uint8	lib\libofp\ofp_v4.h	/^typedef unsigned char uint8, uint8_t;$/;"	t
uint8_t	lib\libofp\ofp_v4.h	/^typedef unsigned char uint8, uint8_t;$/;"	t
version	lib\libofp\ofp_v4.h	/^	uint8_t version; 		\/* OFP_VERSION. *\/$/;"	m	struct:ofp_header
xid	lib\libofp\ofp_v4.h	/^	uint32_t xid; 			\/* Transaction id associated with this packet.$/;"	m	struct:ofp_header
OBX_BASE_ADDR	lib\libreg\main_libreg.c	/^u64 OBX_BASE_ADDR = BASE_ADDR;$/;"	v
OBX_REG_LEN	lib\libreg\main_libreg.c	/^u64 OBX_REG_LEN = REG_LEN;$/;"	v
REG	lib\libreg\main_libreg.c	35;"	d	file:
REG32	lib\libreg\main_libreg.c	36;"	d	file:
__distroy_hw_OpenBox	lib\libreg\main_libreg.c	/^void __distroy_hw_OpenBox(int argc)$/;"	f
distroy_hw_OpenBox	lib\libreg\main_libreg.c	/^void distroy_hw_OpenBox(void)$/;"	f
fast_distroy_hw	lib\libreg\main_libreg.c	/^void fast_distroy_hw(void)$/;"	f
fast_init_hw	lib\libreg\main_libreg.c	/^int fast_init_hw(u64 addr,u64 len)$/;"	f
fast_reg_rd	lib\libreg\main_libreg.c	/^u64 fast_reg_rd(u64 regaddr)$/;"	f
fast_reg_wr	lib\libreg\main_libreg.c	/^void fast_reg_wr(u64 regaddr,u64 regvalue)$/;"	f
fm	lib\libreg\main_libreg.c	/^int fm = 0;\/*映射设备地址的文件句柄*\/$/;"	v
init_hw_OpenBox	lib\libreg\main_libreg.c	/^int init_hw_OpenBox(u64 addr,u64 len)$/;"	f
obx_base	lib\libreg\main_libreg.c	/^void *obx_base = NULL;$/;"	v
read_pcie_base	lib\libreg\main_libreg.c	/^int read_pcie_base(int vendor_id,int device_id)$/;"	f
RULE_LEN	lib\librule\main_librule.c	35;"	d	file:
cmp_key	lib\librule\main_librule.c	/^int cmp_key(struct flow *rule,struct flow *key,struct flow *mask)$/;"	f
cmp_key32	lib\librule\main_librule.c	/^int cmp_key32(struct flow *rule,struct flow *key,struct flow *mask)$/;"	f
cnt	lib\librule\main_librule.c	/^	u64 cnt;		\/**< @brief 软件流表条数*\/$/;"	m	struct:rule_table	file:
fast_add_rule	lib\librule\main_librule.c	/^int fast_add_rule(struct fast_rule *rule)$/;"	f
fast_del_rule	lib\librule\main_librule.c	/^int fast_del_rule(int idx)$/;"	f
fast_match_rule	lib\librule\main_librule.c	/^u32 fast_match_rule(struct flow *key)$/;"	f
fast_modify_rule	lib\librule\main_librule.c	/^int fast_modify_rule(struct fast_rule *rule,int idx)$/;"	f
init_rule	lib\librule\main_librule.c	/^void init_rule(u32 default_action)$/;"	f
n2rule16	lib\librule\main_librule.c	/^u16 n2rule16(u16 n)$/;"	f
n2rule32	lib\librule\main_librule.c	/^u32 n2rule32(u32 n)$/;"	f
n2rule64	lib\librule\main_librule.c	/^u64 n2rule64(u64 n)$/;"	f
openbox_action_reg_rd	lib\librule\main_librule.c	/^u32 openbox_action_reg_rd(u32 addr)$/;"	f
openbox_action_reg_wr	lib\librule\main_librule.c	/^void openbox_action_reg_wr(u32 addr,u32 value)$/;"	f
openbox_rule_reg_rd	lib\librule\main_librule.c	/^u64 openbox_rule_reg_rd(u64 addr)$/;"	f
openbox_rule_reg_wr	lib\librule\main_librule.c	/^void openbox_rule_reg_wr(u64 addr,u64 value)$/;"	f
oxm2rule	lib\librule\main_librule.c	/^void oxm2rule(char *dst,char *oxm,int len)$/;"	f
pad	lib\librule\main_librule.c	/^	u64 pad;		\/**< 为使流表对齐访问使用的填充字段*\/$/;"	m	struct:rule_table	file:
print_hw_rule	lib\librule\main_librule.c	/^void print_hw_rule(void)$/;"	f
print_sw_rule	lib\librule\main_librule.c	/^void print_sw_rule(void)$/;"	f
print_sw_rule_by_idx	lib\librule\main_librule.c	/^void print_sw_rule_by_idx(int idx)$/;"	f
print_user_rule	lib\librule\main_librule.c	/^void print_user_rule(struct fast_rule *rule)$/;"	f
read_hw_rule	lib\librule\main_librule.c	/^int read_hw_rule(struct fast_rule *rule,int index)$/;"	f
reg_value	lib\librule\main_librule.c	/^struct reg_value{$/;"	s	file:
rule_exists	lib\librule\main_librule.c	/^int rule_exists(struct fast_rule *rule)$/;"	f
rule_exists_add	lib\librule\main_librule.c	/^int rule_exists_add(struct fast_rule *rule,int *idx)$/;"	f
rule_idx	lib\librule\main_librule.c	/^int rule_idx = 0;   \/**< @brief 流表规则索引*\/$/;"	v
rule_table	lib\librule\main_librule.c	/^struct rule_table$/;"	s	file:
rules	lib\librule\main_librule.c	/^	struct fast_rule rules[FAST_RULE_CNT];  \/**< @brief 软件流表二维数组*\/$/;"	m	struct:rule_table	typeref:struct:rule_table::fast_rule	file:
set_rule_ipv6_oxm	lib\librule\main_librule.c	/^void set_rule_ipv6_oxm(char *ipv6,char *oxm)\/*OXM是网络序*\/$/;"	f
set_rule_mac64	lib\librule\main_librule.c	/^void set_rule_mac64(char *mac,u64 value)$/;"	f
set_rule_mac_oxm	lib\librule\main_librule.c	/^void set_rule_mac_oxm(char *mac,char *oxm)\/*OXM是网络序*\/$/;"	f
table	lib\librule\main_librule.c	/^struct rule_table table = {0,0,{0}};	\/**< @brief 软件流表对象申明*\/$/;"	v	typeref:struct:rule_table
v	lib\librule\main_librule.c	/^		u64 v[1];$/;"	m	struct:reg_value	file:
write_rule	lib\librule\main_librule.c	/^void write_rule(int idx,u32 valid)$/;"	f
write_rule_bv	lib\librule\main_librule.c	/^void write_rule_bv(int idx,u32 valid)$/;"	f
write_rule_normal	lib\librule\main_librule.c	/^void write_rule_normal(int idx,u32 valid)$/;"	f
zero_rule	lib\librule\main_librule.c	/^struct fast_rule zero_rule = {0};		\/**< @brief 定义一条空的流表项，用做和空规则对比*\/$/;"	v	typeref:struct:fast_rule
FAST_UA_FILE	lib\libua\main_libua.c	39;"	d	file:
cur_mid	lib\libua\main_libua.c	/^int cur_mid = -1;$/;"	v
dest_addr	lib\libua\main_libua.c	/^struct sockaddr_nl src_addr, dest_addr;	$/;"	v	typeref:struct:
fast_cm_send	lib\libua\main_libua.c	/^int fast_cm_send(struct fast_packet *pkt,int pkt_len)$/;"	f
fast_ua_destroy	lib\libua\main_libua.c	/^void fast_ua_destroy(void)$/;"	f
fast_ua_file	lib\libua\main_libua.c	/^int fast_ua_file(u8 mid)$/;"	f
fast_ua_hw_rd	lib\libua\main_libua.c	/^u32 fast_ua_hw_rd(u8 dmid,u32 addr,u32 mask)$/;"	f
fast_ua_hw_wr	lib\libua\main_libua.c	/^void fast_ua_hw_wr(u8 dmid,u32 addr,u32 value,u32 mask)$/;"	f
fast_ua_init	lib\libua\main_libua.c	/^int fast_ua_init(int mid,fast_ua_recv_callback callback)$/;"	f
fast_ua_recv	lib\libua\main_libua.c	/^void fast_ua_recv()\/\/可以提供类似SOCKET接收函数，直接带数据返回的$/;"	f
fast_ua_recvhold	lib\libua\main_libua.c	/^void fast_ua_recvhold()\/\/可以提供类似SOCKET接收函数，直接带数据返回的$/;"	f
fast_ua_register	lib\libua\main_libua.c	/^static int fast_ua_register(int mid)$/;"	f	file:
fast_ua_send	lib\libua\main_libua.c	/^int fast_ua_send(struct fast_packet *pkt,int pkt_len)$/;"	f
iov	lib\libua\main_libua.c	/^struct iovec iov;$/;"	v	typeref:struct:iovec
netlink_msg	lib\libua\main_libua.c	/^struct msghdr netlink_msg;$/;"	v	typeref:struct:msghdr
nlh	lib\libua\main_libua.c	/^struct nlmsghdr *nlh = NULL;$/;"	v	typeref:struct:nlmsghdr
nlsk_recv	lib\libua\main_libua.c	/^int nlsk_recv = -1;$/;"	v
print_pkt	lib\libua\main_libua.c	/^void print_pkt(struct fast_packet *pkt,int pkt_len)$/;"	f
recv_poll	lib\libua\main_libua.c	/^int recv_poll = 1;$/;"	v
recv_thread	lib\libua\main_libua.c	/^void recv_thread(void *argv)$/;"	f
register_ua	lib\libua\main_libua.c	/^struct fast_ua_kernel_msg register_ua;$/;"	v	typeref:struct:fast_ua_kernel_msg
seq	lib\libua\main_libua.c	/^int seq = 0;$/;"	v
src_addr	lib\libua\main_libua.c	/^struct sockaddr_nl src_addr, dest_addr;	$/;"	v	typeref:struct:sockaddr_nl
ua_improper_quit	lib\libua\main_libua.c	/^void ua_improper_quit(int argc)$/;"	f
ua_recv_callback	lib\libua\main_libua.c	/^fast_ua_recv_callback ua_recv_callback = NULL;$/;"	v
uaf	lib\libua\main_libua.c	/^int uaf = 0;$/;"	v
unregister_ua	lib\libua\main_libua.c	/^struct fast_ua_kernel_msg unregister_ua;$/;"	v	typeref:struct:fast_ua_kernel_msg
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
func_append	ltmain.sh	/^func_append ()$/;"	f
func_append_quoted	ltmain.sh	/^func_append_quoted ()$/;"	f
func_arith	ltmain.sh	/^func_arith ()$/;"	f
func_basename	ltmain.sh	/^func_basename ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_dirname	ltmain.sh	/^func_dirname ()$/;"	f
func_dirname_and_basename	ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	ltmain.sh	/^func_len ()$/;"	f
func_lo2o	ltmain.sh	/^func_lo2o ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_split_long_opt	ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_short_opt	ltmain.sh	/^func_split_short_opt ()$/;"	f
func_stripname	ltmain.sh	/^func_stripname ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	ltmain.sh	/^func_xform ()$/;"	f
main	src\main.c	/^int main()$/;"	f
Usage	tools\ctl_rw\main_ctl_rw.c	/^void Usage(char *argv)$/;"	f
callback	tools\ctl_rw\main_ctl_rw.c	/^int callback(struct fast_packet *pkt,int pkt_len)$/;"	f
main	tools\ctl_rw\main_ctl_rw.c	/^int main(int argc,char* argv[])$/;"	f
main_ctl_test	tools\ctl_rw\main_ctl_rw.c	/^void main_ctl_test(int argc,char* argv[])$/;"	f
ua_init	tools\ctl_rw\main_ctl_rw.c	/^void ua_init(u8 mid)$/;"	f
Usage	tools\debug\main_debug.c	/^void Usage(char *argv)$/;"	f
main	tools\debug\main_debug.c	/^int main(int argc,char *argv[])$/;"	f
Usage	tools\mem_rw\main_mem_rw.c	/^void Usage(char *argv)$/;"	f
main	tools\mem_rw\main_mem_rw.c	/^int main(int argc,char *argv[])$/;"	f
main_rw_test	tools\mem_rw\main_mem_rw.c	/^int main_rw_test(int argc,char *argv[])$/;"	f
PORT_REG	tools\port_counts\main_port_counts.c	/^u64 PORT_REG(u8 port,u64 regaddr)$/;"	f
main	tools\port_counts\main_port_counts.c	/^int main(int argc,char *argv[])$/;"	f
show_head_info	tools\port_counts\main_port_counts.c	/^void show_head_info(void)$/;"	f
show_port_counts	tools\port_counts\main_port_counts.c	/^void show_port_counts(int port)$/;"	f
PORT_REG	tools\port_status\main_port_status.c	/^u64 PORT_REG(int port,u64 regaddr)$/;"	f
main	tools\port_status\main_port_status.c	/^int main(int argc,char *argv[])$/;"	f
read_port_status	tools\port_status\main_port_status.c	/^void read_port_status(char ifname[6],u8 port,u8 *updown,u8 *duplex,u16 *speed)$/;"	f
show_head_info	tools\port_status\main_port_status.c	/^void show_head_info(void)$/;"	f
show_port_status	tools\port_status\main_port_status.c	/^void show_port_status(int port)$/;"	f
Usage	tools\reg_rw\main_reg_rw.c	/^void Usage(char *argv)$/;"	f
main	tools\reg_rw\main_reg_rw.c	/^int main(int argc,char *argv[])$/;"	f
Usage	tools\rule_rw\main_rule.c	/^void Usage(char *argv)$/;"	f
main	tools\rule_rw\main_rule.c	/^int main(int argc,char *argv[])$/;"	f
main_rule_test	tools\rule_rw\main_rule.c	/^void main_rule_test(int argc,char *argv[])$/;"	f
callback	tools\ua_fwd\main_ua_fwd.c	/^int callback(struct fast_packet *pkt,int pkt_len)$/;"	f
debug	tools\ua_fwd\main_ua_fwd.c	/^int debug = 0;$/;"	v
main	tools\ua_fwd\main_ua_fwd.c	/^int main(int argc,char* argv[])$/;"	f
outport	tools\ua_fwd\main_ua_fwd.c	/^int outport = -1;$/;"	v
pkt_send_flood	tools\ua_fwd\main_ua_fwd.c	/^void pkt_send_flood(struct fast_packet *pkt,int pkt_len)$/;"	f
pkt_send_normal	tools\ua_fwd\main_ua_fwd.c	/^void pkt_send_normal(struct fast_packet *pkt,int pkt_len)$/;"	f
ua_init	tools\ua_fwd\main_ua_fwd.c	/^void ua_init(u8 mid)$/;"	f
xprintf	tools\ua_fwd\main_ua_fwd.c	30;"	d	file:
Usage	tools\version\main_version.c	/^void Usage(char *argv)$/;"	f
get_value_by_shell	tools\version\main_version.c	/^char *get_value_by_shell(char *cmd)$/;"	f
main	tools\version\main_version.c	/^int main(int argc,char *argv[])$/;"	f
value	tools\version\main_version.c	/^char value[1024] = {0};$/;"	v
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
